[{
	apiVersion: "v1"
	kind:       "PersistentVolumeClaim"
	metadata: {
		name:      "agent-eventhandler"
		namespace: "${NAMESPACE}"
	}
	spec: {
		accessModes: [
			"ReadWriteOnce",
		]
		resources: requests: storage: "1Gi"
	}
},  {
	apiVersion: "monitoring.grafana.com/v1alpha1"
	kind:       "Integration"
	metadata: {
		labels: agent: "grafana-agent"
		name:      "agent-eventhandler"
		namespace: "${NAMESPACE}"
	}
	spec: {
		config: {
			cache_path:    "/etc/eventhandler/eventhandler.cache"
			logs_instance: "${NAMESPACE}/grafana-agent-logs"
		}
		name: "eventhandler"
		type: unique: true
		volumeMounts: [{
			mountPath: "/etc/eventhandler"
			name:      "agent-eventhandler"
		}]
		volumes: [{
			name: "agent-eventhandler"
			persistentVolumeClaim: claimName: "agent-eventhandler"
		}]
	}
}, {
	apiVersion: "monitoring.grafana.com/v1alpha1"
	kind:       "LogsInstance"
	metadata: {
		labels: agent: "grafana-agent"
		name:      "grafana-agent-logs"
		namespace: "${NAMESPACE}"
	}
	spec: {
		clients: [{
			basicAuth: {
				password: {
					key:  "password"
					name: "logs-secret"
				}
				username: {
					key:  "username"
					name: "logs-secret"
				}
			}
			externalLabels: cluster: "${CLUSTER}"
			url: "${LOGS_URL}"
		}]
		podLogsNamespaceSelector: {}
		podLogsSelector: matchLabels: instance: "primary"
	}
}, {
	apiVersion: "monitoring.grafana.com/v1alpha1"
	kind:       "MetricsInstance"
	metadata: {
		labels: agent: "grafana-agent"
		name:      "grafana-agent-metrics"
		namespace: "${NAMESPACE}"
	}
	spec: {
		remoteWrite: [{
			basicAuth: {
				password: {
					key:  "password"
					name: "metrics-secret"
				}
				username: {
					key:  "username"
					name: "metrics-secret"
				}
			}
			url: "${METRICS_URL}"
		}]
		serviceMonitorNamespaceSelector: {}
		serviceMonitorSelector: matchLabels: instance: "primary"
	}
}, {
	apiVersion: "monitoring.grafana.com/v1alpha1"
	kind:       "PodLogs"
	metadata: {
		labels: instance: "primary"
		name:      "kubernetes-logs"
		namespace: "${NAMESPACE}"
	}
	spec: {
		namespaceSelector: any: true
		pipelineStages: [{
			cri: {}}]
		relabelings: [{
			sourceLabels: [
				"__meta_kubernetes_pod_node_name",
			]
			targetLabel: "__host__"
		}, {
			action: "labelmap"
			regex:  "__meta_kubernetes_pod_label_(.+)"
		}, {
			action: "replace"
			sourceLabels: [
				"__meta_kubernetes_namespace",
			]
			targetLabel: "namespace"
		}, {
			action: "replace"
			sourceLabels: [
				"__meta_kubernetes_pod_name",
			]
			targetLabel: "pod"
		}, {
			action: "replace"
			sourceLabels: [
				"__meta_kubernetes_pod_container_name",
			]
			targetLabel: "container"
		}, {
			replacement: "/var/log/pods/*$1/*.log"
			separator:   "/"
			sourceLabels: [
				"__meta_kubernetes_pod_uid",
				"__meta_kubernetes_pod_container_name",
			]
			targetLabel: "__path__"
		}]
		selector: matchLabels: {}
	}
}, {
	apiVersion: "monitoring.coreos.com/v1"
	kind:       "ServiceMonitor"
	metadata: {
		labels: instance: "primary"
		name:      "ksm-monitor"
		namespace: "${NAMESPACE}"
	}
	spec: {
		endpoints: [{
			honorLabels: true
			interval:    "60s"
			path:        "/metrics"
			port:        "http-metrics"
			relabelings: [{
				action:      "replace"
				replacement: "kube-state-metrics"
				targetLabel: "job"
			}]
		}]
		namespaceSelector: matchNames: [
			"${NAMESPACE}",
		]
		selector: matchLabels: "app.kubernetes.io/name": "kube-state-metrics"
	}
}, {
	apiVersion: "monitoring.coreos.com/v1"
	kind:       "ServiceMonitor"
	metadata: {
		labels: instance: "primary"
		name:      "kubelet-monitor"
		namespace: "${NAMESPACE}"
	}
	spec: {
		endpoints: [{
			bearerTokenFile: "/var/run/secrets/kubernetes.io/serviceaccount/token"
			honorLabels:     true
			interval:        "60s"
			path:            "/metrics"
			port:            "https-metrics"
			relabelings: [{
				sourceLabels: [
					"__metrics_path__",
				]
				targetLabel: "metrics_path"
			}, {
				action:      "replace"
				replacement: "kubelet"
				targetLabel: "job"
			}]
			scheme: "https"
			tlsConfig: insecureSkipVerify: true
		}]
		namespaceSelector: matchNames: [
			"${NAMESPACE}",
		]
		selector: matchLabels: "app.kubernetes.io/name": "kubelet"
	}
}, {
	apiVersion: "monitoring.coreos.com/v1"
	kind:       "ServiceMonitor"
	metadata: {
		labels: instance: "primary"
		name:      "cadvisor-monitor"
		namespace: "default"
	}
	spec: {
		endpoints: [{
			bearerTokenFile: "/var/run/secrets/kubernetes.io/serviceaccount/token"
			honorLabels:     true
			interval:        "60s"
			path:            "/metrics/cadvisor"
			port:            "https-metrics"
			relabelings: [{
				sourceLabels: [
					"__metrics_path__",
				]
				targetLabel: "metrics_path"
			}, {
				action:      "replace"
				replacement: "cadvisor"
				targetLabel: "job"
			}]
			scheme: "https"
			tlsConfig: insecureSkipVerify: true
		}]
		namespaceSelector: matchNames: [
			"${NAMESPACE}",
		]
		selector: matchLabels: "app.kubernetes.io/name": "kubelet"
	}
}]
