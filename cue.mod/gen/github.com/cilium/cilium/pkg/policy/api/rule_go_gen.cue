// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/cilium/cilium/pkg/policy/api

package api

import "github.com/cilium/cilium/pkg/labels"

// AuthenticationMode is a string identifying a supported authentication type
#AuthenticationMode: string // #enumAuthenticationMode

#enumAuthenticationMode:
	#AuthenticationModeDisabled |
	#AuthenticationModeRequired |
	#AuthenticationModeAlwaysFail

#AuthenticationModeDisabled:   #AuthenticationMode & "disabled"
#AuthenticationModeRequired:   #AuthenticationMode & "required"
#AuthenticationModeAlwaysFail: #AuthenticationMode & "test-always-fail"

// Authentication specifies the kind of cryptographic authentication required for the traffic to
// be allowed.
#Authentication: {
	// Mode is the required authentication mode for the allowed traffic, if any.
	//
	// +kubebuilder:validation:Enum=disabled;required;test-always-fail
	// +kubebuilder:validation:Required
	mode: #AuthenticationMode @go(Mode)
}

// Rule is a policy rule which must be applied to all endpoints which match the
// labels contained in the endpointSelector
//
// Each rule is split into an ingress section which contains all rules
// applicable at ingress, and an egress section applicable at egress. For rule
// types such as `L4Rule` and `CIDR` which can be applied at both ingress and
// egress, both ingress and egress side have to either specifically allow the
// connection or one side has to be omitted.
//
// Either ingress, egress, or both can be provided. If both ingress and egress
// are omitted, the rule has no effect.
//
// +deepequal-gen:private-method=true
#Rule: {
	// EndpointSelector selects all endpoints which should be subject to
	// this rule. EndpointSelector and NodeSelector cannot be both empty and
	// are mutually exclusive.
	//
	// +kubebuilder:validation:OneOf
	endpointSelector?: #EndpointSelector @go(EndpointSelector)

	// NodeSelector selects all nodes which should be subject to this rule.
	// EndpointSelector and NodeSelector cannot be both empty and are mutually
	// exclusive. Can only be used in CiliumClusterwideNetworkPolicies.
	//
	// +kubebuilder:validation:OneOf
	nodeSelector?: #EndpointSelector @go(NodeSelector)

	// Ingress is a list of IngressRule which are enforced at ingress.
	// If omitted or empty, this rule does not apply at ingress.
	//
	// +kubebuilder:validation:Optional
	ingress?: [...#IngressRule] @go(Ingress,[]IngressRule)

	// IngressDeny is a list of IngressDenyRule which are enforced at ingress.
	// Any rule inserted here will be denied regardless of the allowed ingress
	// rules in the 'ingress' field.
	// If omitted or empty, this rule does not apply at ingress.
	//
	// +kubebuilder:validation:Optional
	ingressDeny?: [...#IngressDenyRule] @go(IngressDeny,[]IngressDenyRule)

	// Egress is a list of EgressRule which are enforced at egress.
	// If omitted or empty, this rule does not apply at egress.
	//
	// +kubebuilder:validation:Optional
	egress?: [...#EgressRule] @go(Egress,[]EgressRule)

	// EgressDeny is a list of EgressDenyRule which are enforced at egress.
	// Any rule inserted here will be denied regardless of the allowed egress
	// rules in the 'egress' field.
	// If omitted or empty, this rule does not apply at egress.
	//
	// +kubebuilder:validation:Optional
	egressDeny?: [...#EgressDenyRule] @go(EgressDeny,[]EgressDenyRule)

	// Labels is a list of optional strings which can be used to
	// re-identify the rule or to store metadata. It is possible to lookup
	// or delete strings based on labels. Labels are not required to be
	// unique, multiple rules can have overlapping or identical labels.
	//
	// +kubebuilder:validation:Optional
	"labels"?: labels.#LabelArray @go(Labels)

	// Description is a free form string, it can be used by the creator of
	// the rule to store human readable explanation of the purpose of this
	// rule. Rules cannot be identified by comment.
	//
	// +kubebuilder:validation:Optional
	description?: string @go(Description)
}
