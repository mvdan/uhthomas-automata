// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/NVIDIA/k8s-operator-libs/api/upgrade/v1alpha1

package v1alpha1

import "k8s.io/apimachinery/pkg/util/intstr"

// DriverUpgradePolicySpec describes policy configuration for automatic upgrades
// +kubebuilder:object:root=true
// +kubebuilder:object:generate=true
#DriverUpgradePolicySpec: {
	// AutoUpgrade is a global switch for automatic upgrade feature
	// if set to false all other options are ignored
	// +optional
	// +kubebuilder:default:=false
	autoUpgrade?: bool @go(AutoUpgrade)

	// MaxParallelUpgrades indicates how many nodes can be upgraded in parallel
	// 0 means no limit, all nodes will be upgraded in parallel
	// +optional
	// +kubebuilder:default:=1
	// +kubebuilder:validation:Minimum:=0
	maxParallelUpgrades?: int @go(MaxParallelUpgrades)

	// MaxUnavailable is the maximum number of nodes with the driver installed, that can be unavailable during the upgrade.
	// Value can be an absolute number (ex: 5) or a percentage of total nodes at the start of upgrade (ex: 10%).
	// Absolute number is calculated from percentage by rounding up.
	// By default, a fixed value of 25% is used.
	// +optional
	// +kubebuilder:default:="25%"
	maxUnavailable?:    null | intstr.#IntOrString    @go(MaxUnavailable,*intstr.IntOrString)
	podDeletion?:       null | #PodDeletionSpec       @go(PodDeletion,*PodDeletionSpec)
	waitForCompletion?: null | #WaitForCompletionSpec @go(WaitForCompletion,*WaitForCompletionSpec)
	drain?:             null | #DrainSpec             @go(DrainSpec,*DrainSpec)
}

// WaitForCompletionSpec describes the configuration for waiting on job completions
#WaitForCompletionSpec: {
	// PodSelector specifies a label selector for the pods to wait for completion
	// For more details on label selectors, see:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	// +optional
	podSelector?: string @go(PodSelector)

	// TimeoutSecond specifies the length of time in seconds to wait before giving up on pod termination, zero means infinite
	// +optional
	// +kubebuilder:default:=0
	// +kubebuilder:validation:Minimum:=0
	timeoutSeconds?: int @go(TimeoutSecond)
}

// PodDeletionSpec describes configuration for deletion of pods using special resources during automatic upgrade
#PodDeletionSpec: {
	// Force indicates if force deletion is allowed
	// +optional
	// +kubebuilder:default:=false
	force?: bool @go(Force)

	// TimeoutSecond specifies the length of time in seconds to wait before giving up on pod termination, zero means infinite
	// +optional
	// +kubebuilder:default:=300
	// +kubebuilder:validation:Minimum:=0
	timeoutSeconds?: int @go(TimeoutSecond)

	// DeleteEmptyDir indicates if should continue even if there are pods using emptyDir
	// (local data that will be deleted when the pod is deleted)
	// +optional
	// +kubebuilder:default:=false
	deleteEmptyDir?: bool @go(DeleteEmptyDir)
}

// DrainSpec describes configuration for node drain during automatic upgrade
#DrainSpec: {
	// Enable indicates if node draining is allowed during upgrade
	// +optional
	// +kubebuilder:default:=false
	enable?: bool @go(Enable)

	// Force indicates if force draining is allowed
	// +optional
	// +kubebuilder:default:=false
	force?: bool @go(Force)

	// PodSelector specifies a label selector to filter pods on the node that need to be drained
	// For more details on label selectors, see:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	// +optional
	podSelector?: string @go(PodSelector)

	// TimeoutSecond specifies the length of time in seconds to wait before giving up drain, zero means infinite
	// +optional
	// +kubebuilder:default:=300
	// +kubebuilder:validation:Minimum:=0
	timeoutSeconds?: int @go(TimeoutSecond)

	// DeleteEmptyDir indicates if should continue even if there are pods using emptyDir
	// (local data that will be deleted when the node is drained)
	// +optional
	// +kubebuilder:default:=false
	deleteEmptyDir?: bool @go(DeleteEmptyDir)
}
