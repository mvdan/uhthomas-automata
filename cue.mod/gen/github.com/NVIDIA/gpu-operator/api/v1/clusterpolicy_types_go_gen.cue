// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/NVIDIA/gpu-operator/api/v1

package v1

import (
	corev1 "k8s.io/api/core/v1"
	upgrade_v1alpha1 "github.com/NVIDIA/k8s-operator-libs/api/upgrade/v1alpha1"
	promv1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
	kata_v1alpha1 "github.com/NVIDIA/k8s-kata-manager/api/v1alpha1/config"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ClusterPolicySpec defines the desired state of ClusterPolicy
#ClusterPolicySpec: {
	// Operator component spec
	operator: #OperatorSpec @go(Operator)

	// Daemonset defines common configuration for all Daemonsets
	daemonsets: #DaemonsetsSpec @go(Daemonsets)

	// Driver component spec
	driver: #DriverSpec @go(Driver)

	// Toolkit component spec
	toolkit: #ToolkitSpec @go(Toolkit)

	// DevicePlugin component spec
	devicePlugin: #DevicePluginSpec @go(DevicePlugin)

	// DCGMExporter spec
	dcgmExporter: #DCGMExporterSpec @go(DCGMExporter)

	// DCGM component spec
	dcgm: #DCGMSpec @go(DCGM)

	// NodeStatusExporter spec
	nodeStatusExporter: #NodeStatusExporterSpec @go(NodeStatusExporter)

	// GPUFeatureDiscovery spec
	gfd: #GPUFeatureDiscoverySpec @go(GPUFeatureDiscovery)

	// MIG spec
	mig?: #MIGSpec @go(MIG)

	// MIGManager for configuration to deploy MIG Manager
	migManager?: #MIGManagerSpec @go(MIGManager)

	// PSP defines spec for handling PodSecurityPolicies
	psp?: #PSPSpec @go(PSP)

	// PSA defines spec for PodSecurityAdmission configuration
	psa?: #PSASpec @go(PSA)

	// Validator defines the spec for operator-validator daemonset
	validator?: #ValidatorSpec @go(Validator)

	// GPUDirectStorage defines the spec for GDS components(Experimental)
	gds?: null | #GPUDirectStorageSpec @go(GPUDirectStorage,*GPUDirectStorageSpec)

	// SandboxWorkloads defines the spec for handling sandbox workloads (i.e. Virtual Machines)
	sandboxWorkloads?: #SandboxWorkloadsSpec @go(SandboxWorkloads)

	// VFIOManager for configuration to deploy VFIO-PCI Manager
	vfioManager?: #VFIOManagerSpec @go(VFIOManager)

	// SandboxDevicePlugin component spec
	sandboxDevicePlugin?: #SandboxDevicePluginSpec @go(SandboxDevicePlugin)

	// VGPUManager component spec
	vgpuManager?: #VGPUManagerSpec @go(VGPUManager)

	// VGPUDeviceManager spec
	vgpuDeviceManager?: #VGPUDeviceManagerSpec @go(VGPUDeviceManager)

	// CDI configures how the Container Device Interface is used in the cluster
	cdi?: #CDIConfigSpec @go(CDI)

	// KataManager component spec
	kataManager?: #KataManagerSpec @go(KataManager)

	// CCManager component spec
	ccManager?: #CCManagerSpec @go(CCManager)
}

// Runtime defines container runtime type
#Runtime: string // #enumRuntime

#enumRuntime:
	#Docker |
	#CRIO |
	#Containerd

// RuntimeClass defines the runtime class to use for GPU-enabled pods
#RuntimeClass: string

// Docker runtime
#Docker: #Runtime & "docker"

// CRIO runtime
#CRIO: #Runtime & "crio"

// Containerd runtime
#Containerd: #Runtime & "containerd"

// OperatorSpec describes configuration options for the operator
#OperatorSpec: {
	// +kubebuilder:validation:Enum=docker;crio;containerd
	// +kubebuilder:default=docker
	defaultRuntime: #Runtime @go(DefaultRuntime)

	// +kubebuilder:default=nvidia
	runtimeClass?:  string             @go(RuntimeClass)
	initContainer?: #InitContainerSpec @go(InitContainer)

	// Optional: Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and services.
	labels?: {[string]: string} @go(Labels,map[string]string)

	// Optional: Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	annotations?: {[string]: string} @go(Annotations,map[string]string)

	// UseOpenShiftDriverToolkit indicates if DriverToolkit image should be used on OpenShift to build and install driver modules
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="On OpenShift, enable DriverToolkit image to build and install driver modules"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	use_ocp_driver_toolkit?: null | bool @go(UseOpenShiftDriverToolkit,*bool)
}

// EnvVar represents an environment variable present in a Container.
#EnvVar: {
	// Name of the environment variable.
	name: string @go(Name)

	// Value of the environment variable.
	value?: string @go(Value)
}

// ResourceRequirements describes the compute resource requirements.
#ResourceRequirements: {
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	// +optional
	limits?: corev1.#ResourceList @go(Limits)

	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	// +optional
	requests?: corev1.#ResourceList @go(Requests)
}

// SandboxWorkloadsSpec describes configuration for handling sandbox workloads (i.e. Virtual Machines)
#SandboxWorkloadsSpec: {
	// Enabled indicates if the GPU Operator should manage additional operands required
	// for sandbox workloads (i.e. VFIO Manager, vGPU Manager, and additional device plugins)
	enabled?: null | bool @go(Enabled,*bool)

	// DefaultWorkload indicates the default GPU workload type to configure
	// worker nodes in the cluster for
	// +kubebuilder:validation:Enum=container;vm-passthrough;vm-vgpu
	// +kubebuilder:default=container
	defaultWorkload?: string @go(DefaultWorkload)
}

// PSPSpec describes configuration for PodSecurityPolicies to apply for all Pods
#PSPSpec: {
	// Enabled indicates if PodSecurityPolicies needs to be enabled for all Pods
	enabled?: null | bool @go(Enabled,*bool)
}

// PSASpec describes configuration for PodSecurityAdmission to apply for all Pods
#PSASpec: {
	// Enabled indicates if PodSecurityAdmission configuration needs to be enabled for all Pods
	enabled?: null | bool @go(Enabled,*bool)
}

// DaemonsetsSpec indicates common configuration for all Daemonsets managed by GPU Operator
#DaemonsetsSpec: {
	// Optional: Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and services.
	labels?: {[string]: string} @go(Labels,map[string]string)

	// Optional: Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	annotations?: {[string]: string} @go(Annotations,map[string]string)

	// Optional: Set tolerations
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Tolerations"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:io.kubernetes:Tolerations"
	tolerations?: [...corev1.#Toleration] @go(Tolerations,[]corev1.Toleration)

	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="PriorityClassName"
	priorityClassName?: string @go(PriorityClassName)

	// +kubebuilder:validation:Optional
	// +kubebuilder:default=RollingUpdate
	// +kubebuilder:validation:Enum=RollingUpdate;OnDelete
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="UpdateStrategy for all Daemonsets"
	updateStrategy?: string @go(UpdateStrategy)

	// Optional: Configuration for rolling update of all DaemonSet pods
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Rolling update configuration for all DaemonSet pods"
	rollingUpdate?: null | #RollingUpdateSpec @go(RollingUpdate,*RollingUpdateSpec)
}

// InitContainerSpec describes configuration for initContainer image used with all components
#InitContainerSpec: {
	// Repository represents image repository path
	repository?: string @go(Repository)

	// Image represents image name
	// +kubebuilder:validation:Pattern=[a-zA-Z0-9\-]+
	image?: string @go(Image)

	// Version represents image tag(version)
	version?: string @go(Version)

	// Image pull policy
	// +kubebuilder:validation:Optional
	imagePullPolicy?: string @go(ImagePullPolicy)

	// Image pull secrets
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image pull secrets"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:io.kubernetes:Secret"
	imagePullSecrets?: [...string] @go(ImagePullSecrets,[]string)
}

// ValidatorSpec describes configuration options for validation pod
#ValidatorSpec: {
	// Plugin validator spec
	plugin?: #PluginValidatorSpec @go(Plugin)

	// Toolkit validator spec
	toolkit?: #ToolkitValidatorSpec @go(Toolkit)

	// Toolkit validator spec
	driver?: #DriverValidatorSpec @go(Driver)

	// CUDA validator spec
	cuda?: #CUDAValidatorSpec @go(CUDA)

	// VfioPCI validator spec
	vfioPCI?: #VFIOPCIValidatorSpec @go(VFIOPCI)

	// VGPUManager validator spec
	vgpuManager?: #VGPUManagerValidatorSpec @go(VGPUManager)

	// VGPUDevices validator spec
	vgpuDevices?: #VGPUDevicesValidatorSpec @go(VGPUDevices)

	// Validator image repository
	// +kubebuilder:validation:Optional
	repository?: string @go(Repository)

	// Validator image name
	// +kubebuilder:validation:Pattern=[a-zA-Z0-9\-]+
	image?: string @go(Image)

	// Validator image tag
	// +kubebuilder:validation:Optional
	version?: string @go(Version)

	// Image pull policy
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image Pull Policy"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:imagePullPolicy"
	imagePullPolicy?: string @go(ImagePullPolicy)

	// Image pull secrets
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image pull secrets"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:io.kubernetes:Secret"
	imagePullSecrets?: [...string] @go(ImagePullSecrets,[]string)

	// Optional: Define resources requests and limits for each pod
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Resource Requirements"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
	resources?: null | #ResourceRequirements @go(Resources,*ResourceRequirements)

	// Optional: List of arguments
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Arguments"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	args?: [...string] @go(Args,[]string)

	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)
}

// PluginValidatorSpec defines validator spec for NVIDIA Device Plugin
#PluginValidatorSpec: {
	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)
}

// ToolkitValidatorSpec defines validator spec for NVIDIA Container Toolkit
#ToolkitValidatorSpec: {
	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)
}

// DriverValidatorSpec defines validator spec for NVIDIA Driver validation
#DriverValidatorSpec: {
	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)
}

// CUDAValidatorSpec defines validator spec for CUDA validation workload pod
#CUDAValidatorSpec: {
	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)
}

// VFIOPCIValidatorSpec defines validator spec for NVIDIA VFIO-PCI device validation
#VFIOPCIValidatorSpec: {
	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)
}

// VGPUManagerValidatorSpec defines validator spec for NVIDIA vGPU Manager
#VGPUManagerValidatorSpec: {
	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)
}

// VGPUDevicesValidatorSpec defines validator spec for NVIDIA vGPU device validator
#VGPUDevicesValidatorSpec: {
	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)
}

// MIGSpec defines the configuration for MIG support
#MIGSpec: {
	// Optional: MIGStrategy to apply for GFD and NVIDIA Device Plugin
	// +kubebuilder:validation:Enum=none;single;mixed
	strategy?: #MIGStrategy @go(Strategy)
}

// DriverManagerSpec describes configuration for NVIDIA Driver Manager(initContainer)
#DriverManagerSpec: {
	// Repository represents Driver Managerrepository path
	repository?: string @go(Repository)

	// Image represents NVIDIA Driver Manager image name
	// +kubebuilder:validation:Pattern=[a-zA-Z0-9\-]+
	image?: string @go(Image)

	// Version represents NVIDIA Driver Manager image tag(version)
	version?: string @go(Version)

	// Image pull policy
	// +kubebuilder:validation:Optional
	imagePullPolicy?: string @go(ImagePullPolicy)

	// Image pull secrets
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image pull secrets"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:io.kubernetes:Secret"
	imagePullSecrets?: [...string] @go(ImagePullSecrets,[]string)

	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)
}

// ContainerProbeSpec defines the properties for configuring container probes
#ContainerProbeSpec: {
	// Number of seconds after the container has started before liveness probes are initiated.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	// +kubebuilder:validation:Optional
	initialDelaySeconds?: int32 @go(InitialDelaySeconds)

	// Number of seconds after which the probe times out.
	// Defaults to 1 second. Minimum value is 1.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	// +kubebuilder:validation:Optional
	// +kubebuilder:validation:Minimum=1
	timeoutSeconds?: int32 @go(TimeoutSeconds)

	// How often (in seconds) to perform the probe.
	// Default to 10 seconds. Minimum value is 1.
	// +kubebuilder:validation:Optional
	// +kubebuilder:validation:Minimum=1
	periodSeconds?: int32 @go(PeriodSeconds)

	// Minimum consecutive successes for the probe to be considered successful after having failed.
	// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	// +kubebuilder:validation:Optional
	// +kubebuilder:validation:Minimum=1
	successThreshold?: int32 @go(SuccessThreshold)

	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	// Defaults to 3. Minimum value is 1.
	// +kubebuilder:validation:Optional
	// +kubebuilder:validation:Minimum=1
	failureThreshold?: int32 @go(FailureThreshold)
}

// DriverSpec defines the properties for NVIDIA Driver deployment
#DriverSpec: {
	// UseNvidiaDriverCRD indicates if the deployment of NVIDIA Driver is managed by the NVIDIADriver CRD type
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Enable NVIDIA Driver deployment through NVIDIADriver CRD type"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	useNvidiaDriverCRD?: null | bool @go(UseNvidiaDriverCRD,*bool)

	// UsePrecompiled indicates if deployment of NVIDIA Driver using pre-compiled modules is enabled
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Enable NVIDIA Driver deployment using pre-compiled modules"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	usePrecompiled?: null | bool @go(UsePrecompiled,*bool)

	// UseOpenKernelModules indicates if the open GPU kernel modules should be used
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Enable use of open GPU kernel modules"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	useOpenKernelModules?: null | bool @go(UseOpenKernelModules,*bool)

	// Enabled indicates if deployment of NVIDIA Driver through operator is enabled
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Enable NVIDIA Driver deployment through GPU Operator"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	enabled?: null | bool @go(Enabled,*bool)

	// NVIDIA Driver container startup probe settings
	startupProbe?: null | #ContainerProbeSpec @go(StartupProbe,*ContainerProbeSpec)

	// NVIDIA Driver container liveness probe settings
	livenessProbe?: null | #ContainerProbeSpec @go(LivenessProbe,*ContainerProbeSpec)

	// NVIDIA Driver container readiness probe settings
	readinessProbe?: null | #ContainerProbeSpec @go(ReadinessProbe,*ContainerProbeSpec)
	rdma?:           null | #GPUDirectRDMASpec  @go(GPUDirectRDMA,*GPUDirectRDMASpec)

	// Driver auto-upgrade settings
	upgradePolicy?: null | upgrade_v1alpha1.#DriverUpgradePolicySpec @go(UpgradePolicy,*upgrade_v1alpha1.DriverUpgradePolicySpec)

	// NVIDIA Driver image repository
	// +kubebuilder:validation:Optional
	repository?: string @go(Repository)

	// NVIDIA Driver image name
	// +kubebuilder:validation:Pattern=[a-zA-Z0-9\-]+
	image?: string @go(Image)

	// NVIDIA Driver image tag
	// +kubebuilder:validation:Optional
	version?: string @go(Version)

	// Image pull policy
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image Pull Policy"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:imagePullPolicy"
	imagePullPolicy?: string @go(ImagePullPolicy)

	// Image pull secrets
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image pull secrets"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:io.kubernetes:Secret"
	imagePullSecrets?: [...string] @go(ImagePullSecrets,[]string)

	// Manager represents configuration for NVIDIA Driver Manager initContainer
	manager?: #DriverManagerSpec @go(Manager)

	// Optional: Define resources requests and limits for each pod
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Resource Requirements"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
	resources?: null | #ResourceRequirements @go(Resources,*ResourceRequirements)

	// Optional: List of arguments
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Arguments"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	args?: [...string] @go(Args,[]string)

	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)

	// Optional: Custom repo configuration for NVIDIA Driver container
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Custom Repo Configuration For NVIDIA Driver Container"
	repoConfig?: null | #DriverRepoConfigSpec @go(RepoConfig,*DriverRepoConfigSpec)

	// Optional: Custom certificates configuration for NVIDIA Driver container
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Custom Certificates Configuration For NVIDIA Driver Container"
	certConfig?: null | #DriverCertConfigSpec @go(CertConfig,*DriverCertConfigSpec)

	// Optional: Licensing configuration for NVIDIA vGPU licensing
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Licensing Configuration For NVIDIA vGPU Driver Container"
	licensingConfig?: null | #DriverLicensingConfigSpec @go(LicensingConfig,*DriverLicensingConfigSpec)

	// Optional: Virtual Topology Daemon configuration for NVIDIA vGPU drivers
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Custom Virtual Topology Daemon Configuration For vGPU Driver Container"
	virtualTopology?: null | #VirtualTopologyConfigSpec @go(VirtualTopology,*VirtualTopologyConfigSpec)

	// Optional: Kernel module configuration parameters for the NVIDIA Driver
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Kernel module configuration parameters for the NVIDIA driver"
	kernelModuleConfig?: null | #KernelModuleConfigSpec @go(KernelModuleConfig,*KernelModuleConfigSpec)
}

// VGPUManagerSpec defines the properties for the NVIDIA vGPU Manager deployment
#VGPUManagerSpec: {
	// Enabled indicates if deployment of NVIDIA vGPU Manager through operator is enabled
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Enable vgpu host driver deployment through GPU Operator"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	enabled?: null | bool @go(Enabled,*bool)

	// NVIDIA vGPU Manager image repository
	// +kubebuilder:validation:Optional
	repository?: string @go(Repository)

	// NVIDIA vGPU Manager  image name
	// +kubebuilder:validation:Pattern=[a-zA-Z0-9\-]+
	image?: string @go(Image)

	// NVIDIA vGPU Manager image tag
	// +kubebuilder:validation:Optional
	version?: string @go(Version)

	// Image pull policy
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image Pull Policy"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:imagePullPolicy"
	imagePullPolicy?: string @go(ImagePullPolicy)

	// Image pull secrets
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image pull secrets"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:io.kubernetes:Secret"
	imagePullSecrets?: [...string] @go(ImagePullSecrets,[]string)

	// Optional: Define resources requests and limits for each pod
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Resource Requirements"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
	resources?: null | #ResourceRequirements @go(Resources,*ResourceRequirements)

	// Optional: List of arguments
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Arguments"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	args?: [...string] @go(Args,[]string)

	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)

	// DriverManager represents configuration for NVIDIA Driver Manager initContainer
	driverManager?: #DriverManagerSpec @go(DriverManager)
}

// ToolkitSpec defines the properties for NVIDIA Container Toolkit deployment
#ToolkitSpec: {
	// Enabled indicates if deployment of NVIDIA Container Toolkit through operator is enabled
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Enable NVIDIA Container Toolkit deployment through GPU Operator"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	enabled?: null | bool @go(Enabled,*bool)

	// NVIDIA Container Toolkit image repository
	// +kubebuilder:validation:Optional
	repository?: string @go(Repository)

	// NVIDIA Container Toolkit image name
	// +kubebuilder:validation:Pattern=[a-zA-Z0-9\-]+
	image?: string @go(Image)

	// NVIDIA Container Toolkit image tag
	// +kubebuilder:validation:Optional
	version?: string @go(Version)

	// Image pull policy
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image Pull Policy"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:imagePullPolicy"
	imagePullPolicy?: string @go(ImagePullPolicy)

	// Image pull secrets
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image pull secrets"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:io.kubernetes:Secret"
	imagePullSecrets?: [...string] @go(ImagePullSecrets,[]string)

	// Optional: Define resources requests and limits for each pod
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Resource Requirements"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
	resources?: null | #ResourceRequirements @go(Resources,*ResourceRequirements)

	// Optional: List of arguments
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Arguments"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	args?: [...string] @go(Args,[]string)

	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)

	// Toolkit install directory on the host
	// +kubebuilder:validation:Optional
	// +kubebuilder:default=/usr/local/nvidia
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Toolkit install directory on the host"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:text"
	installDir?: string @go(InstallDir)
}

// DevicePluginSpec defines the properties for NVIDIA Device Plugin deployment
#DevicePluginSpec: {
	// Enabled indicates if deployment of NVIDIA Device Plugin through operator is enabled
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Enable NVIDIA Device Plugin deployment through GPU Operator"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	enabled?: null | bool @go(Enabled,*bool)

	// NVIDIA Device Plugin image repository
	// +kubebuilder:validation:Optional
	repository?: string @go(Repository)

	// NVIDIA Device Plugin image name
	// +kubebuilder:validation:Pattern=[a-zA-Z0-9\-]+
	image?: string @go(Image)

	// NVIDIA Device Plugin image tag
	// +kubebuilder:validation:Optional
	version?: string @go(Version)

	// Image pull policy
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image Pull Policy"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:imagePullPolicy"
	imagePullPolicy?: string @go(ImagePullPolicy)

	// Image pull secrets
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image pull secrets"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:io.kubernetes:Secret"
	imagePullSecrets?: [...string] @go(ImagePullSecrets,[]string)

	// Optional: Define resources requests and limits for each pod
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Resource Requirements"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
	resources?: null | #ResourceRequirements @go(Resources,*ResourceRequirements)

	// Optional: List of arguments
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Arguments"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	args?: [...string] @go(Args,[]string)

	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)

	// Optional: Configuration for the NVIDIA Device Plugin via the ConfigMap
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Configuration for the NVIDIA Device Plugin via the ConfigMap"
	config?: null | #DevicePluginConfig @go(Config,*DevicePluginConfig)
}

// DevicePluginConfig defines ConfigMap name for NVIDIA Device Plugin config
#DevicePluginConfig: {
	// ConfigMap name for NVIDIA Device Plugin config including shared config between plugin and GFD
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="ConfigMap name for NVIDIA Device Plugin including shared config between plugin and GFD"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:text"
	name?: string @go(Name)

	// Default config name within the ConfigMap for the NVIDIA Device Plugin  config
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Default config name within the ConfigMap for the NVIDIA Device Plugin config"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:text"
	default?: string @go(Default)
}

// SandboxDevicePluginSpec defines the properties for the NVIDIA Sandbox Device Plugin deployment
#SandboxDevicePluginSpec: {
	// Enabled indicates if deployment of NVIDIA Sandbox Device Plugin through operator is enabled
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Enable NVIDIA Sandbox Device Plugin deployment through GPU Operator"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	enabled?: null | bool @go(Enabled,*bool)

	// NVIDIA Sandbox Device Plugin image repository
	// +kubebuilder:validation:Optional
	repository?: string @go(Repository)

	// NVIDIA Sandbox Device Plugin image name
	// +kubebuilder:validation:Pattern=[a-zA-Z0-9\-]+
	image?: string @go(Image)

	// NVIDIA Sandbox Device Plugin image tag
	// +kubebuilder:validation:Optional
	version?: string @go(Version)

	// Image pull policy
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image Pull Policy"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:imagePullPolicy"
	imagePullPolicy?: string @go(ImagePullPolicy)

	// Image pull secrets
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image pull secrets"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:io.kubernetes:Secret"
	imagePullSecrets?: [...string] @go(ImagePullSecrets,[]string)

	// Optional: Define resources requests and limits for each pod
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Resource Requirements"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
	resources?: null | #ResourceRequirements @go(Resources,*ResourceRequirements)

	// Optional: List of arguments
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Arguments"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	args?: [...string] @go(Args,[]string)

	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)
}

// DCGMExporterSpec defines the properties for NVIDIA DCGM Exporter deployment
#DCGMExporterSpec: {
	// Enabled indicates if deployment of NVIDIA DCGM Exporter through operator is enabled
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Enable NVIDIA DCGM Exporter deployment through GPU Operator"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	enabled?: null | bool @go(Enabled,*bool)

	// NVIDIA DCGM Exporter image repository
	// +kubebuilder:validation:Optional
	repository?: string @go(Repository)

	// NVIDIA DCGM Exporter image name
	// +kubebuilder:validation:Pattern=[a-zA-Z0-9\-]+
	image?: string @go(Image)

	// NVIDIA DCGM Exporter image tag
	// +kubebuilder:validation:Optional
	version?: string @go(Version)

	// Image pull policy
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image Pull Policy"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:imagePullPolicy"
	imagePullPolicy?: string @go(ImagePullPolicy)

	// Image pull secrets
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image pull secrets"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:io.kubernetes:Secret"
	imagePullSecrets?: [...string] @go(ImagePullSecrets,[]string)

	// Optional: Define resources requests and limits for each pod
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Resource Requirements"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
	resources?: null | #ResourceRequirements @go(Resources,*ResourceRequirements)

	// Optional: List of arguments
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Arguments"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	args?: [...string] @go(Args,[]string)

	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)

	// Optional: Custom metrics configuration for NVIDIA DCGM Exporter
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Custom Metrics Configuration For DCGM Exporter"
	config?: null | #DCGMExporterMetricsConfig @go(MetricsConfig,*DCGMExporterMetricsConfig)

	// Optional: ServiceMonitor configuration for NVIDIA DCGM Exporter
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="ServiceMonitor configuration for NVIDIA DCGM Exporter"
	serviceMonitor?: null | #DCGMExporterServiceMonitorConfig @go(ServiceMonitor,*DCGMExporterServiceMonitorConfig)
}

// DCGMExporterMetricsConfig defines metrics to be collected by NVIDIA DCGM Exporter
#DCGMExporterMetricsConfig: {
	// ConfigMap name with file dcgm-metrics.csv for metrics to be collected by NVIDIA DCGM Exporter
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="ConfigMap name with file dcgm-metrics.csv"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:text"
	name?: string @go(Name)
}

// DCGMExporterServiceMonitorConfig defines configuration options for the ServiceMonitor
// deployed for DCGM Exporter
#DCGMExporterServiceMonitorConfig: {
	// Enabled indicates if ServiceMonitor is deployed for NVIDIA DCGM Exporter
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Enable deployment of NVIDIA DCGM Exporter ServiceMonitor"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	enabled?: null | bool @go(Enabled,*bool)

	// Interval which metrics should be scraped from NVIDIA DCGM Exporter. If not specified Prometheus’ global scrape interval is used.
	// Supported units: y, w, d, h, m, s, ms
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Interval which metrics should be scraped from NVDIA DCGM Exporter"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:text"
	interval?: promv1.#Duration @go(Interval)

	// HonorLabels chooses the metric’s labels on collisions with target labels.
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Choose the metric's label on collisions with target labels"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	honorLabels?: null | bool @go(HonorLabels,*bool)

	// AdditionalLabels to add to ServiceMonitor instance for NVIDIA DCGM Exporter
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Additional labels to add to ServiceMonitor instance for NVIDIA DCGM Exporter"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:text"
	additionalLabels?: {[string]: string} @go(AdditionalLabels,map[string]string)

	// Relabelings allows to rewrite labels on metric sets for NVIDIA DCGM Exporter
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Relabelings allows to rewrite labels on metric sets for NVIDIA DCGM Exporter"
	relabelings?: [...null | promv1.#RelabelConfig] @go(Relabelings,[]*promv1.RelabelConfig)
}

// DCGMSpec defines the properties for NVIDIA DCGM deployment
#DCGMSpec: {
	// Enabled indicates if deployment of NVIDIA DCGM Hostengine as a separate pod is enabled.
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Enable NVIDIA DCGM hostengine as a separate Pod"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	enabled?: null | bool @go(Enabled,*bool)

	// NVIDIA DCGM image repository
	// +kubebuilder:validation:Optional
	repository?: string @go(Repository)

	// NVIDIA DCGM image name
	// +kubebuilder:validation:Pattern=[a-zA-Z0-9\-]+
	image?: string @go(Image)

	// NVIDIA DCGM image tag
	// +kubebuilder:validation:Optional
	version?: string @go(Version)

	// Image pull policy
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image Pull Policy"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:imagePullPolicy"
	imagePullPolicy?: string @go(ImagePullPolicy)

	// Image pull secrets
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image pull secrets"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:io.kubernetes:Secret"
	imagePullSecrets?: [...string] @go(ImagePullSecrets,[]string)

	// Optional: Define resources requests and limits for each pod
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Resource Requirements"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
	resources?: null | #ResourceRequirements @go(Resources,*ResourceRequirements)

	// Optional: List of arguments
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Arguments"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	args?: [...string] @go(Args,[]string)

	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)

	// HostPort represents host port that needs to be bound for DCGM engine (Default: 5555)
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Host port to bind for DCGM engine"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:number"
	hostPort?: int32 @go(HostPort)
}

// NodeStatusExporterSpec defines the properties for node-status-exporter state
#NodeStatusExporterSpec: {
	// Enabled indicates if deployment of Node Status Exporter is enabled.
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Enable Node Status Exporter deployment through GPU Operator"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	enabled?: null | bool @go(Enabled,*bool)

	// Node Status Exporterimage repository
	// +kubebuilder:validation:Optional
	repository?: string @go(Repository)

	// Node Status Exporter image name
	// +kubebuilder:validation:Pattern=[a-zA-Z0-9\-]+
	image?: string @go(Image)

	// Node Status Exporterimage tag
	// +kubebuilder:validation:Optional
	version?: string @go(Version)

	// Image pull policy
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image Pull Policy"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:imagePullPolicy"
	imagePullPolicy?: string @go(ImagePullPolicy)

	// Image pull secrets
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image pull secrets"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:io.kubernetes:Secret"
	imagePullSecrets?: [...string] @go(ImagePullSecrets,[]string)

	// Optional: Define resources requests and limits for each pod
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Resource Requirements"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
	resources?: null | #ResourceRequirements @go(Resources,*ResourceRequirements)

	// Optional: List of arguments
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Arguments"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	args?: [...string] @go(Args,[]string)

	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)
}

// DriverRepoConfigSpec defines custom repo configuration for NVIDIA Driver container
#DriverRepoConfigSpec: {
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="ConfigMap Name"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:text"
	configMapName?: string @go(ConfigMapName)
}

// DriverCertConfigSpec defines custom certificates configuration for NVIDIA Driver container
#DriverCertConfigSpec: {
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="ConfigMap Name"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:text"
	name?: string @go(Name)
}

// DriverLicensingConfigSpec defines licensing server configuration for NVIDIA Driver container
#DriverLicensingConfigSpec: {
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="ConfigMap Name"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:text"
	configMapName?: string @go(ConfigMapName)

	// NLSEnabled indicates if NVIDIA Licensing System is used for licensing.
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Enable NVIDIA Licensing System licensing"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	nlsEnabled?: null | bool @go(NLSEnabled,*bool)
}

// VirtualTopologyConfigSpec defines virtual topology daemon configuration with NVIDIA vGPU
#VirtualTopologyConfigSpec: {
	// Optional: Config name representing virtual topology daemon configuration file nvidia-topologyd.conf
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="ConfigMap Name"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:text"
	config?: string @go(Config)
}

// KernelModuleConfigSpec defines custom configuration parameters for the NVIDIA Driver
#KernelModuleConfigSpec: {
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="ConfigMap Name"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:text"
	name?: string @go(Name)
}

// RollingUpdateSpec defines configuration for the rolling update of all DaemonSet pods
#RollingUpdateSpec: {
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Maximum number of nodes to simultaneously apply Daemonset pod updates on. Default 1"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:text"
	maxUnavailable?: string @go(MaxUnavailable)
}

// GPUFeatureDiscoverySpec defines the properties for GPU Feature Discovery Plugin
#GPUFeatureDiscoverySpec: {
	// Enabled indicates if deployment of GPU Feature Discovery Plugin is enabled.
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Enable GPU Feature Discovery Plugin deployment through GPU Operator"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	enabled?: null | bool @go(Enabled,*bool)

	// GFD image repository
	// +kubebuilder:validation:Optional
	repository?: string @go(Repository)

	// GFD image name
	// +kubebuilder:validation:Pattern=[a-zA-Z0-9\-]+
	image?: string @go(Image)

	// GFD image tag
	// +kubebuilder:validation:Optional
	version?: string @go(Version)

	// Image pull policy
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image Pull Policy"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:imagePullPolicy"
	imagePullPolicy?: string @go(ImagePullPolicy)

	// Image pull secrets
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image pull secrets"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:io.kubernetes:Secret"
	imagePullSecrets?: [...string] @go(ImagePullSecrets,[]string)

	// Optional: Define resources requests and limits for each pod
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Resource Requirements"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
	resources?: null | #ResourceRequirements @go(Resources,*ResourceRequirements)

	// Optional: List of arguments
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Arguments"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	args?: [...string] @go(Args,[]string)

	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)
}

// MIGManagerSpec defines the properties for deploying NVIDIA MIG Manager
#MIGManagerSpec: {
	// Enabled indicates if deployment of NVIDIA MIG Manager is enabled
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Enable NVIDIA MIG Manager deployment through GPU Operator"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	enabled?: null | bool @go(Enabled,*bool)

	// NVIDIA MIG Manager image repository
	// +kubebuilder:validation:Optional
	repository?: string @go(Repository)

	// NVIDIA MIG Manager image name
	// +kubebuilder:validation:Pattern=[a-zA-Z0-9\-]+
	image?: string @go(Image)

	// NVIDIA MIG Manager image tag
	// +kubebuilder:validation:Optional
	version?: string @go(Version)

	// Image pull policy
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image Pull Policy"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:imagePullPolicy"
	imagePullPolicy?: string @go(ImagePullPolicy)

	// Image pull secrets
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image pull secrets"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:io.kubernetes:Secret"
	imagePullSecrets?: [...string] @go(ImagePullSecrets,[]string)

	// Optional: Define resources requests and limits for each pod
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Resource Requirements"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
	resources?: null | #ResourceRequirements @go(Resources,*ResourceRequirements)

	// Optional: List of arguments
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Arguments"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	args?: [...string] @go(Args,[]string)

	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)

	// Optional: Custom mig-parted configuration for NVIDIA MIG Manager container
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Custom mig-parted configuration for NVIDIA MIG Manager container"
	config?: null | #MIGPartedConfigSpec @go(Config,*MIGPartedConfigSpec)

	// Optional: Custom gpu-clients configuration for NVIDIA MIG Manager container
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Custom gpu-clients configuration for NVIDIA MIG Manager container"
	gpuClientsConfig?: null | #MIGGPUClientsConfigSpec @go(GPUClientsConfig,*MIGGPUClientsConfigSpec)
}

// GPUDirectRDMASpec defines the properties for nvidia-peermem deployment
#GPUDirectRDMASpec: {
	// Enabled indicates if GPUDirect RDMA is enabled through GPU operator
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Enable GPUDirect RDMA through GPU operator"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	enabled?: null | bool @go(Enabled,*bool)

	// UseHostMOFED indicates to use MOFED drivers directly installed on the host to enable GPUDirect RDMA
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Use MOFED drivers directly installed on the host to enable GPUDirect RDMA"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	useHostMofed?: null | bool @go(UseHostMOFED,*bool)
}

// GPUDirectStorageSpec defines the properties for NVIDIA GPUDirect Storage Driver deployment(Experimental)
#GPUDirectStorageSpec: {
	// Enabled indicates if GPUDirect Storage is enabled through GPU operator
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Enable GPUDirect Storage through GPU operator"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	enabled?: null | bool @go(Enabled,*bool)

	// NVIDIA GPUDirect Storage Driver image repository
	// +kubebuilder:validation:Optional
	repository?: string @go(Repository)

	// NVIDIA GPUDirect Storage Driver image name
	// +kubebuilder:validation:Pattern=[a-zA-Z0-9\-]+
	image?: string @go(Image)

	// NVIDIA GPUDirect Storage Driver image tag
	// +kubebuilder:validation:Optional
	version?: string @go(Version)

	// Image pull policy
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image Pull Policy"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:imagePullPolicy"
	imagePullPolicy?: string @go(ImagePullPolicy)

	// Image pull secrets
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image pull secrets"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:io.kubernetes:Secret"
	imagePullSecrets?: [...string] @go(ImagePullSecrets,[]string)

	// Optional: List of arguments
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Arguments"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	args?: [...string] @go(Args,[]string)

	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)
}

// MIGPartedConfigSpec defines custom mig-parted config for NVIDIA MIG Manager container
#MIGPartedConfigSpec: {
	// ConfigMap name
	// +kubebuilder:validation:Optional
	// +kubebuilder:default=default-mig-parted-config
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="ConfigMap Name"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:text"
	name?: string @go(Name)

	// Default MIG config to be applied on the node, when there is no config specified with the node label nvidia.com/mig.config
	// +kubebuilder:validation:Optional
	// +kubebuilder:default=all-disabled
	// +kubebuilder:validation:Enum=all-disabled;""
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Default MIG config"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:text"
	default?: string @go(Default)
}

// MIGGPUClientsConfigSpec defines custom gpu-clients config for NVIDIA MIG Manager container
#MIGGPUClientsConfigSpec: {
	// ConfigMap name
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="ConfigMap Name"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:text"
	name?: string @go(Name)
}

// KataManagerSpec defines the configuration for the kata-manager which prepares NVIDIA-specific kata runtimes
#KataManagerSpec: {
	// Enabled indicates if deployment of Kata Manager is enabled
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Enable Kata Manager deployment through GPU Operator"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	enabled?: null | bool @go(Enabled,*bool)

	// Kata Manager config
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Kata Manager configuration"
	config?: null | kata_v1alpha1.#Config @go(Config,*kata_v1alpha1.Config)

	// Kata Manager image repository
	// +kubebuilder:validation:Optional
	repository?: string @go(Repository)

	// Kata Manager image name
	// +kubebuilder:validation:Pattern=[a-zA-Z0-9\-]+
	image?: string @go(Image)

	// Kata Manager image tag
	// +kubebuilder:validation:Optional
	version?: string @go(Version)

	// Image pull policy
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image Pull Policy"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:imagePullPolicy"
	imagePullPolicy?: string @go(ImagePullPolicy)

	// Image pull secrets
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image pull secrets"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:io.kubernetes:Secret"
	imagePullSecrets?: [...string] @go(ImagePullSecrets,[]string)

	// Optional: Define resources requests and limits for each pod
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Resource Requirements"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
	resources?: null | #ResourceRequirements @go(Resources,*ResourceRequirements)

	// Optional: List of arguments
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Arguments"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	args?: [...string] @go(Args,[]string)

	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)
}

// CCManagerSpec defines the properties for deploying Confidential Containers (CC) manager
#CCManagerSpec: {
	// Enabled indicates if deployment of CC Manager is enabled
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Enable CC Manager deployment through GPU Operator"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	enabled?: null | bool @go(Enabled,*bool)

	// Default CC mode setting for compatible GPUs on the node
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Default CC mode setting for all CC-capable GPUs"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:text"
	// +kubebuilder:validation:Enum=on;off;devtools
	defaultMode?: string @go(DefaultMode)

	// CC Manager image repository
	// +kubebuilder:validation:Optional
	repository?: string @go(Repository)

	// CC Manager image name
	// +kubebuilder:validation:Pattern=[a-zA-Z0-9\-]+
	image?: string @go(Image)

	// CC Manager image tag
	// +kubebuilder:validation:Optional
	version?: string @go(Version)

	// Image pull policy
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image Pull Policy"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:imagePullPolicy"
	imagePullPolicy?: string @go(ImagePullPolicy)

	// Image pull secrets
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image pull secrets"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:io.kubernetes:Secret"
	imagePullSecrets?: [...string] @go(ImagePullSecrets,[]string)

	// Optional: Define resources requests and limits for each pod
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Resource Requirements"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
	resources?: null | #ResourceRequirements @go(Resources,*ResourceRequirements)

	// Optional: List of arguments
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Arguments"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	args?: [...string] @go(Args,[]string)

	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)
}

// VFIOManagerSpec defines the properties for deploying VFIO-PCI manager
#VFIOManagerSpec: {
	// Enabled indicates if deployment of VFIO Manager is enabled
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Enable VFIO Manager deployment through GPU Operator"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	enabled?: null | bool @go(Enabled,*bool)

	// VFIO Manager image repository
	// +kubebuilder:validation:Optional
	repository?: string @go(Repository)

	// VFIO Manager image name
	// +kubebuilder:validation:Pattern=[a-zA-Z0-9\-]+
	image?: string @go(Image)

	// VFIO Manager image tag
	// +kubebuilder:validation:Optional
	version?: string @go(Version)

	// Image pull policy
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image Pull Policy"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:imagePullPolicy"
	imagePullPolicy?: string @go(ImagePullPolicy)

	// Image pull secrets
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image pull secrets"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:io.kubernetes:Secret"
	imagePullSecrets?: [...string] @go(ImagePullSecrets,[]string)

	// Optional: Define resources requests and limits for each pod
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Resource Requirements"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
	resources?: null | #ResourceRequirements @go(Resources,*ResourceRequirements)

	// Optional: List of arguments
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Arguments"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	args?: [...string] @go(Args,[]string)

	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)

	// DriverManager represents configuration for NVIDIA Driver Manager
	driverManager?: #DriverManagerSpec @go(DriverManager)
}

// VGPUDeviceManagerSpec defines the properties for deploying NVIDIA vGPU Device Manager
#VGPUDeviceManagerSpec: {
	// Enabled indicates if deployment of NVIDIA vGPU Device Manager is enabled
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Enable NVIDIA vGPU Device Manager deployment through GPU Operator"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	enabled?: null | bool @go(Enabled,*bool)

	// NVIDIA vGPU Device Manager image repository
	// +kubebuilder:validation:Optional
	repository?: string @go(Repository)

	// NVIDIA vGPU Device Manager image name
	// +kubebuilder:validation:Pattern=[a-zA-Z0-9\-]+
	image?: string @go(Image)

	// NVIDIA vGPU Device Manager image tag
	// +kubebuilder:validation:Optional
	version?: string @go(Version)

	// Image pull policy
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image Pull Policy"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:imagePullPolicy"
	imagePullPolicy?: string @go(ImagePullPolicy)

	// Image pull secrets
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Image pull secrets"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:io.kubernetes:Secret"
	imagePullSecrets?: [...string] @go(ImagePullSecrets,[]string)

	// Optional: Define resources requests and limits for each pod
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Resource Requirements"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
	resources?: null | #ResourceRequirements @go(Resources,*ResourceRequirements)

	// Optional: List of arguments
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Arguments"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	args?: [...string] @go(Args,[]string)

	// Optional: List of environment variables
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Environment Variables"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:advanced,urn:alm:descriptor:com.tectonic.ui:text"
	env?: [...#EnvVar] @go(Env,[]EnvVar)

	// NVIDIA vGPU devices configuration for NVIDIA vGPU Device Manager container
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="NVIDIA vGPU devices configuration for NVIDIA vGPU Device Manager container"
	config?: null | #VGPUDevicesConfigSpec @go(Config,*VGPUDevicesConfigSpec)
}

// VGPUDevicesConfigSpec defines vGPU devices configuration for NVIDIA vGPU Device Manager container
#VGPUDevicesConfigSpec: {
	// ConfigMap name
	// +kubebuilder:validation:Optional
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="ConfigMap Name"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:text"
	name?: string @go(Name)

	// Default config name within the ConfigMap
	// +kubebuilder:validation:Optional
	// +kubebuilder:default=default
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Default config name within the ConfigMap for the NVIDIA vGPU devices config"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:text"
	default?: string @go(Default)
}

// CDIConfigSpec defines how the Container Device Interface is used in the cluster.
#CDIConfigSpec: {
	// Enabled indicates whether CDI can be used to make GPUs accessible to containers.
	// +kubebuilder:validation:Optional
	// +kubebuilder:default=false
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Enable CDI as a mechanism for making GPUs accessible to containers"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	enabled?: null | bool @go(Enabled,*bool)

	// Default indicates whether to use CDI as the default mechanism for providing GPU access to containers.
	// +kubebuilder:validation:Optional
	// +kubebuilder:default=false
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Configure CDI as the default mechanism for making GPUs accessible to containers"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
	default?: null | bool @go(Default,*bool)
}

// MIGStrategy indicates MIG mode
#MIGStrategy: string // #enumMIGStrategy

#enumMIGStrategy:
	#MIGStrategyNone |
	#MIGStrategySingle |
	#MIGStrategyMixed

// MIGStrategyNone indicates MIG mode disabled.
#MIGStrategyNone: #MIGStrategy & "none"

// MIGStrategySingle indicates Single MIG mode
#MIGStrategySingle: #MIGStrategy & "single"

// MIGStrategyMixed indicates Mixed MIG mode
#MIGStrategyMixed: #MIGStrategy & "mixed"

// State indicates state of GPU operator components
#State: string // #enumState

#enumState:
	#Ignored |
	#Ready |
	#NotReady |
	#Disabled

// Ignored indicates duplicate ClusterPolicy instances and rest are ignored.
#Ignored: #State & "ignored"

// Ready indicates all components of ClusterPolicy are ready
#Ready: #State & "ready"

// NotReady indicates some/all components of ClusterPolicy are not ready
#NotReady: #State & "notReady"

// Disabled indicates if the state is disabled
#Disabled: #State & "disabled"

// ClusterPolicyStatus defines the observed state of ClusterPolicy
#ClusterPolicyStatus: {
	// +kubebuilder:validation:Enum=ignored;ready;notReady
	// State indicates status of ClusterPolicy
	state: #State @go(State)

	// Namespace indicates a namespace in which the operator is installed
	namespace?: string @go(Namespace)

	// Conditions is a list of conditions representing the ClusterPolicy's current state.
	conditions?: [...metav1.#Condition] @go(Conditions,[]metav1.Condition)
}

// ClusterPolicy is the Schema for the clusterpolicies API
#ClusterPolicy: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta   @go(ObjectMeta)
	spec?:     #ClusterPolicySpec   @go(Spec)
	status?:   #ClusterPolicyStatus @go(Status)
}

// ClusterPolicyList contains a list of ClusterPolicy
#ClusterPolicyList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ClusterPolicy] @go(Items,[]ClusterPolicy)
}
