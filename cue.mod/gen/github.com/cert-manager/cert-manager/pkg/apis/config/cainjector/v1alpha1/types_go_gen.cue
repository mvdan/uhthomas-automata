// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/cert-manager/cert-manager/pkg/apis/config/cainjector/v1alpha1

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	sharedv1alpha1 "github.com/cert-manager/cert-manager/pkg/apis/config/shared/v1alpha1"
	logsapi "k8s.io/component-base/logs/api/v1"
)

#CAInjectorConfiguration: {
	metav1.#TypeMeta

	// kubeConfig is the kubeconfig file used to connect to the Kubernetes apiserver.
	// If not specified, the cainjector will attempt to load the in-cluster-config.
	kubeConfig?: string @go(KubeConfig)

	// If set, this limits the scope of cainjector to a single namespace.
	// If set, cainjector will not update resources with certificates outside of the
	// configured namespace.
	namespace?: string @go(Namespace)

	// LeaderElectionConfig configures the behaviour of the leader election
	leaderElectionConfig: sharedv1alpha1.#LeaderElectionConfig @go(LeaderElectionConfig)

	// EnableDataSourceConfig determines whether cainjector's control loops will watch
	// cert-manager resources as potential sources of CA data.
	enableDataSourceConfig: #EnableDataSourceConfig @go(EnableDataSourceConfig)

	// EnableInjectableConfig determines whether cainjector's control loops will watch
	// cert-manager resources as potential targets for CA data injection.
	enableInjectableConfig: #EnableInjectableConfig @go(EnableInjectableConfig)

	// Enable profiling for cainjector.
	enablePprof: bool @go(EnablePprof)

	// The host and port that Go profiler should listen on, i.e localhost:6060.
	// Ensure that profiler is not exposed on a public address. Profiler will be
	// served at /debug/pprof.
	pprofAddress?: string @go(PprofAddress)

	// logging configures the logging behaviour of the cainjector.
	// https://pkg.go.dev/k8s.io/component-base@v0.27.3/logs/api/v1#LoggingConfiguration
	logging: logsapi.#LoggingConfiguration @go(Logging)

	// featureGates is a map of feature names to bools that enable or disable experimental
	// features.
	// +optional
	featureGates?: {[string]: bool} @go(FeatureGates,map[string]bool)
}

#EnableDataSourceConfig: {
	// Certificates detemines whether cainjector's control loops will watch
	// cert-manager Certificate resources as potential sources of CA data.
	// If not set, defaults to true.
	certificates?: null | bool @go(Certificates,*bool)
}

#EnableInjectableConfig: {
	// ValidatingWebhookConfigurations determines whether cainjector
	// will spin up a control loop to inject CA data to annotated
	// ValidatingWebhookConfigurations
	// If not set, defaults to true.
	validatingWebhookConfigurations?: null | bool @go(ValidatingWebhookConfigurations,*bool)

	// MutatingWebhookConfigurations determines whether cainjector
	// will spin up a control loop to inject CA data to annotated
	// MutatingWebhookConfigurations
	// If not set, defaults to true.
	mutatingWebhookConfigurations?: null | bool @go(MutatingWebhookConfigurations,*bool)

	// CustomResourceDefinitions determines whether cainjector
	// will spin up a control loop to inject CA data to annotated
	// CustomResourceDefinitions
	// If not set, defaults to true.
	customResourceDefinitions?: null | bool @go(CustomResourceDefinitions,*bool)

	// APIServices determines whether cainjector
	// will spin up a control loop to inject CA data to annotated
	// APIServices
	// If not set, defaults to true.
	apiServices?: null | bool @go(APIServices,*bool)
}
