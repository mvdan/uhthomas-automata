// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/cert-manager/cert-manager/pkg/apis/config/shared/v1alpha1

package v1alpha1

// TLSConfig configures how TLS certificates are sourced for serving.
// Only one of 'filesystem' or 'dynamic' may be specified.
#TLSConfig: {
	// cipherSuites is the list of allowed cipher suites for the server.
	// Values are from tls package constants (https://golang.org/pkg/crypto/tls/#pkg-constants).
	// If not specified, the default for the Go version will be used and may change over time.
	cipherSuites?: [...string] @go(CipherSuites,[]string)

	// minTLSVersion is the minimum TLS version supported.
	// Values are from tls package constants (https://golang.org/pkg/crypto/tls/#pkg-constants).
	// If not specified, the default for the Go version will be used and may change over time.
	minTLSVersion?: string @go(MinTLSVersion)

	// Filesystem enables using a certificate and private key found on the local filesystem.
	// These files will be periodically polled in case they have changed, and dynamically reloaded.
	filesystem: #FilesystemServingConfig @go(Filesystem)

	// When Dynamic serving is enabled, the controller will generate a CA used to sign
	// certificates and persist it into a Kubernetes Secret resource (for other replicas of the
	// controller to consume).
	// It will then generate a certificate in-memory for itself using this CA to serve with.
	dynamic: #DynamicServingConfig @go(Dynamic)
}

// DynamicServingConfig makes the controller generate a CA and persist it into Secret resources.
// This CA will be used by all instances of the controller for signing serving certificates.
#DynamicServingConfig: {
	// Namespace of the Kubernetes Secret resource containing the TLS certificate
	// used as a CA to sign dynamic serving certificates.
	secretNamespace?: string @go(SecretNamespace)

	// Secret resource name containing the TLS certificate
	// used as a CA to sign dynamic serving certificates.
	secretName?: string @go(SecretName)

	// DNSNames that must be present on serving certificates signed by the CA.
	dnsNames?: [...string] @go(DNSNames,[]string)

	// LeafDuration is a customizable duration on serving certificates signed by the CA.
	leafDuration?: null | #Duration @go(LeafDuration,*Duration)
}

// FilesystemServingConfig enables using a certificate and private key found on the local filesystem.
// These files will be periodically polled in case they have changed, and dynamically reloaded.
#FilesystemServingConfig: {
	// Path to a file containing TLS certificate & chain to serve with
	certFile?: string @go(CertFile)

	// Path to a file containing a TLS private key to serve with
	keyFile?: string @go(KeyFile)
}
