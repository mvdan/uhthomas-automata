// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/grafana/grafana-openapi-client-go/models

package models

// FloatHistogram FloatHistogram is similar to Histogram but uses float64 for all
// counts. Additionally, bucket counts are absolute and not deltas.
//
// A FloatHistogram is needed by PromQL to handle operations that might result
// in fractional counts. Since the counts in a histogram are unlikely to be too
// large to be represented precisely by a float64, a FloatHistogram can also be
// used to represent a histogram with integer counts and thus serves as a more
// generalized representation.
//
// swagger:model FloatHistogram
#FloatHistogram: {
	// Total number of observations. Must be zero or positive.
	Count?: float64

	// counter reset hint
	CounterResetHint?: #CounterResetHint

	// Observation counts in buckets. Each represents an absolute count and
	// must be zero or positive.
	PositiveBuckets: [...float64] @go(,[]float64)

	// Spans for positive and negative buckets (see Span below).
	PositiveSpans: [...null | #Span] @go(,[]*Span)

	// Currently valid schema numbers are -4 <= n <= 8.  They are all for
	// base-2 bucket schemas, where 1 is a bucket boundary in each case, and
	// then each power of two is divided into 2^n logarithmic buckets.  Or
	// in other words, each bucket boundary is the previous boundary times
	// 2^(2^-n).
	Schema?: int32

	// Sum of observations. This is also used as the stale marker.
	Sum?: float64

	// Observations falling into the zero bucket. Must be zero or positive.
	ZeroCount?: float64

	// Width of the zero bucket.
	ZeroThreshold?: float64
}
