// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/grafana/grafana-openapi-client-go/models

package models

// QueryStat QueryStat is used for storing arbitrary statistics metadata related to a query and its result, e.g. total request time, data processing time.
//
// The embedded FieldConfig's display name must be set.
// It corresponds to the QueryResultMetaStat on the frontend (https://github.com/grafana/grafana/blob/master/packages/grafana-data/src/types/data.ts#L53).
//
// swagger:model QueryStat
#QueryStat: {
	// Map values to a display color
	// NOTE: this interface is under development in the frontend... so simple map for now
	color?: _ @go(Color,interface{})

	// Panel Specific Values
	custom?: _ @go(Custom,interface{})

	// decimals
	decimals?: uint16 @go(Decimals)

	// Description is human readable field metadata
	description?: string @go(Description)

	// DisplayName overrides Grafana default naming, should not be used from a data source
	displayName?: string @go(DisplayName)

	// DisplayNameFromDS overrides Grafana default naming strategy.
	displayNameFromDS?: string @go(DisplayNameFromDS)

	// Filterable indicates if the Field's data can be filtered by additional calls.
	filterable?: bool @go(Filterable)

	// Interval indicates the expected regular step between values in the series.
	// When an interval exists, consumers can identify "missing" values when the expected value is not present.
	// The grafana timeseries visualization will render disconnected values when missing values are found it the time field.
	// The interval uses the same units as the values.  For time.Time, this is defined in milliseconds.
	interval?: float64 @go(Interval)

	// The behavior when clicking on a result
	links: [...null | #DataLink] @go(Links,[]*DataLink)

	// mappings
	mappings?: #ValueMappings @go(Mappings)

	// max
	max?: #ConfFloat64 @go(Max)

	// min
	min?: #ConfFloat64 @go(Min)

	// Alternative to empty string
	noValue?: string @go(NoValue)

	// Path is an explicit path to the field in the datasource. When the frame meta includes a path,
	// this will default to `${frame.meta.path}/${field.name}
	//
	// When defined, this value can be used as an identifier within the datasource scope, and
	// may be used as an identifier to update values in a subsequent request
	path?: string @go(Path)

	// thresholds
	thresholds?: null | #ThresholdsConfig @go(Thresholds,*ThresholdsConfig)

	// type
	type?: null | #FieldTypeConfig @go(Type,*FieldTypeConfig)

	// Numeric Options
	unit?: string @go(Unit)

	// value
	value?: float64 @go(Value)

	// Writeable indicates that the datasource knows how to update this value
	writeable?: bool @go(Writeable)
}
