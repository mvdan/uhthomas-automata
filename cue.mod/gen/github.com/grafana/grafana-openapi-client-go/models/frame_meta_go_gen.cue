// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/grafana/grafana-openapi-client-go/models

package models

// FrameMeta FrameMeta matches:
//
// https://github.com/grafana/grafana/blob/master/packages/grafana-data/src/types/data.ts#L11
// NOTE -- in javascript this can accept any `[key: string]: any;` however
// this interface only exposes the values we want to be exposed
//
// swagger:model FrameMeta
#FrameMeta: {
	// Channel is the path to a stream in grafana live that has real-time updates for this data.
	channel?: string @go(Channel)

	// Custom datasource specific values.
	custom?: _ @go(Custom,interface{})

	// data topic
	dataTopic?: #DataTopic @go(DataTopic)

	// ExecutedQueryString is the raw query sent to the underlying system. All macros and templating
	// have been applied.  When metadata contains this value, it will be shown in the query inspector.
	executedQueryString?: string @go(ExecutedQueryString)

	// Notices provide additional information about the data in the Frame that
	// Grafana can display to the user in the user interface.
	notices: [...null | #Notice] @go(Notices,[]*Notice)

	// Path is a browsable path on the datasource.
	path?: string @go(Path)

	// PathSeparator defines the separator pattern to decode a hierarchy. The default separator is '/'.
	pathSeparator?: string @go(PathSeparator)

	// PreferredVisualizationPluginId sets the panel plugin id to use to render the data when using Explore. If
	// the plugin cannot be found will fall back to PreferredVisualization.
	preferredVisualisationPluginId?: string @go(PreferredVisualisationPluginID)

	// preferred visualisation type
	preferredVisualisationType?: #VisType @go(PreferredVisualisationType)

	// Stats is an array of query result statistics.
	stats: [...null | #QueryStat] @go(Stats,[]*QueryStat)

	// type
	type?: #FrameType @go(Type)

	// type version
	typeVersion?: #FrameTypeVersion @go(TypeVersion)

	// Array of field indices which values create a unique id for each row. Ideally this should be globally unique ID
	// but that isn't guarantied. Should help with keeping track and deduplicating rows in visualizations, especially
	// with streaming data with frequent updates.
	// Example: TraceID in Tempo, table name + primary key in SQL
	uniqueRowIdFields: [...int64] @go(UniqueRowIDFields,[]int64)
}
