// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/grafana/grafana-openapi-client-go/models

package models

// Certificate A Certificate represents an X.509 certificate.
//
// swagger:model Certificate
#Certificate: {
	// authority key Id
	AuthorityKeyId: [...uint8] @go(AuthorityKeyID,[]uint8)

	// BasicConstraintsValid indicates whether IsCA, MaxPathLen,
	// and MaxPathLenZero are valid.
	BasicConstraintsValid?: bool

	// CRL Distribution Points
	CRLDistributionPoints: [...string] @go(,[]string)

	// Subject Alternate Name values. (Note that these values may not be valid
	// if invalid values were contained within a parsed certificate. For
	// example, an element of DNSNames may not be a valid DNS domain name.)
	DNSNames: [...string] @go(,[]string)

	// email addresses
	EmailAddresses: [...string] @go(,[]string)

	// excluded DNS domains
	ExcludedDNSDomains: [...string] @go(,[]string)

	// excluded email addresses
	ExcludedEmailAddresses: [...string] @go(,[]string)

	// excluded IP ranges
	ExcludedIPRanges: [...null | #IPNet] @go(,[]*IPNet)

	// excluded URI domains
	ExcludedURIDomains: [...string] @go(,[]string)

	// ext key usage
	ExtKeyUsage: [...#ExtKeyUsage] @go(,[]ExtKeyUsage)

	// Extensions contains raw X.509 extensions. When parsing certificates,
	// this can be used to extract non-critical extensions that are not
	// parsed by this package. When marshaling certificates, the Extensions
	// field is ignored, see ExtraExtensions.
	Extensions: [...null | #Extension] @go(,[]*Extension)

	// ExtraExtensions contains extensions to be copied, raw, into any
	// marshaled certificates. Values override any extensions that would
	// otherwise be produced based on the other fields. The ExtraExtensions
	// field is not populated when parsing certificates, see Extensions.
	ExtraExtensions: [...null | #Extension] @go(,[]*Extension)

	// IP addresses
	IPAddresses: [...string] @go(,[]string)

	// is c a
	IsCA?: bool

	// issuer
	Issuer?: null | #Name @go(,*Name)

	// issuing certificate URL
	IssuingCertificateURL: [...string] @go(,[]string)

	// key usage
	KeyUsage?: #KeyUsage

	// MaxPathLen and MaxPathLenZero indicate the presence and
	// value of the BasicConstraints' "pathLenConstraint".
	//
	// When parsing a certificate, a positive non-zero MaxPathLen
	// means that the field was specified, -1 means it was unset,
	// and MaxPathLenZero being true mean that the field was
	// explicitly set to zero. The case of MaxPathLen==0 with MaxPathLenZero==false
	// should be treated equivalent to -1 (unset).
	//
	// When generating a certificate, an unset pathLenConstraint
	// can be requested with either MaxPathLen == -1 or using the
	// zero value for both MaxPathLen and MaxPathLenZero.
	MaxPathLen?: int64

	// MaxPathLenZero indicates that BasicConstraintsValid==true
	// and MaxPathLen==0 should be interpreted as an actual
	// maximum path length of zero. Otherwise, that combination is
	// interpreted as MaxPathLen not being set.
	MaxPathLenZero?: bool

	// RFC 5280, 4.2.2.1 (Authority Information Access)
	OCSPServer: [...string] @go(,[]string)

	// permitted DNS domains
	PermittedDNSDomains: [...string] @go(,[]string)

	// Name constraints
	PermittedDNSDomainsCritical?: bool

	// permitted email addresses
	PermittedEmailAddresses: [...string] @go(,[]string)

	// permitted IP ranges
	PermittedIPRanges: [...null | #IPNet] @go(,[]*IPNet)

	// permitted URI domains
	PermittedURIDomains: [...string] @go(,[]string)

	// policy identifiers
	PolicyIdentifiers: [...#ObjectIdentifier] @go(,[]ObjectIdentifier)

	// public key
	PublicKey?: _ @go(,interface{})

	// public key algorithm
	PublicKeyAlgorithm?: #PublicKeyAlgorithm

	// raw
	Raw: [...uint8] @go(,[]uint8)

	// raw issuer
	RawIssuer: [...uint8] @go(,[]uint8)

	// raw subject
	RawSubject: [...uint8] @go(,[]uint8)

	// raw subject public key info
	RawSubjectPublicKeyInfo: [...uint8] @go(,[]uint8)

	// raw t b s certificate
	RawTBSCertificate: [...uint8] @go(,[]uint8)

	// serial number
	SerialNumber?: string

	// signature
	Signature: [...uint8] @go(,[]uint8)

	// signature algorithm
	SignatureAlgorithm?: #SignatureAlgorithm

	// subject
	Subject?: null | #Name @go(,*Name)

	// subject key Id
	SubjectKeyId: [...uint8] @go(SubjectKeyID,[]uint8)

	// u r is
	URIs: [...null | #URL] @go(,[]*URL)

	// UnhandledCriticalExtensions contains a list of extension IDs that
	// were not (fully) processed when parsing. Verify will fail if this
	// slice is non-empty, unless verification is delegated to an OS
	// library which understands all the critical extensions.
	//
	// Users can access these extensions using Extensions and can remove
	// elements from this slice if they believe that they have been
	// handled.
	UnhandledCriticalExtensions: [...#ObjectIdentifier] @go(,[]ObjectIdentifier)

	// unknown ext key usage
	UnknownExtKeyUsage: [...#ObjectIdentifier] @go(,[]ObjectIdentifier)

	// version
	Version?: int64
}
