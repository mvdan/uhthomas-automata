// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/jodevsa/wireguard-operator/pkg/api/v1alpha1

package v1alpha1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#PrivateKey: {
	secretKeyRef: corev1.#SecretKeySelector @go(SecretKeyRef)
}

#Status: {
}

// WireguardPeerSpec defines the desired state of WireguardPeer
#WireguardPeerSpec: {
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
	// Important: Run "make" to regenerate code after modifying this file
	// The address of the peer.
	address?: string @go(Address)

	// Set to true to temporarily disable the peer.
	disabled?: bool @go(Disabled)

	// The DNS configuration for the peer.
	dns?: string @go(Dns)

	// The private key of the peer
	PrivateKeyRef?: #PrivateKey @go(PrivateKey)

	// The key used by the peer to authenticate with the wg server.
	publicKey?: string @go(PublicKey)

	// The name of the Wireguard instance in k8s that the peer belongs to. The wg instance should be in the same namespace as the peer.
	//+kubebuilder:validation:Required
	//+kubebuilder:validation:MinLength=1
	wireguardRef: string @go(WireguardRef)

	// Egress network policies for the peer.
	egressNetworkPolicies?: #EgressNetworkPolicies @go(EgressNetworkPolicies)
	downloadSpeed?:         #Speed                 @go(DownloadSpeed)
	uploadSpeed?:           #Speed                 @go(UploadSpeed)
}

#EgressNetworkPolicies: [...#EgressNetworkPolicy]

// +kubebuilder:validation:Enum=ACCEPT;REJECT;Accept;Reject
#EgressNetworkPolicyAction: string // #enumEgressNetworkPolicyAction

#enumEgressNetworkPolicyAction:
	#EgressNetworkPolicyActionAccept |
	#EgressNetworkPolicyActionDeny

// +kubebuilder:validation:Enum=TCP;UDP;ICMP
#EgressNetworkPolicyProtocol: string // #enumEgressNetworkPolicyProtocol

#enumEgressNetworkPolicyProtocol:
	#EgressNetworkPolicyProtocolTCP |
	#EgressNetworkPolicyProtocolUDP

#EgressNetworkPolicyActionAccept: #EgressNetworkPolicyAction & "Accept"
#EgressNetworkPolicyActionDeny:   #EgressNetworkPolicyAction & "Reject"

#EgressNetworkPolicyProtocolTCP: #EgressNetworkPolicyProtocol & "TCP"
#EgressNetworkPolicyProtocolUDP: #EgressNetworkPolicyProtocol & "UDP"

#EgressNetworkPolicy: {
	// Specifies the action to take when outgoing traffic from a Wireguard peer matches the policy. This could be 'Accept' or 'Reject'.
	action?: #EgressNetworkPolicyAction @go(Action)

	// A struct that specifies the destination address and port for the traffic. This could include IP addresses or hostnames, as well as specific port numbers or port ranges.
	to?: #EgressNetworkPolicyTo @go(To)

	// Specifies the protocol to match for this policy. This could be TCP, UDP, or ICMP.
	protocol?: #EgressNetworkPolicyProtocol @go(Protocol)
}

#EgressNetworkPolicyTo: {
	// A string field that specifies the destination IP address for traffic that matches the policy.
	ip?: string @go(Ip)

	// An integer field that specifies the destination port number for traffic that matches the policy.
	port?: int32 @go(Port) @protobuf(3,varint,opt)
}

// WireguardPeerStatus defines the observed state of WireguardPeer
#WireguardPeerStatus: {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "make" to regenerate code after modifying this file
	// A string field that contains the current configuration for the Wireguard peer.
	config?: string @go(Config)

	// A string field that represents the current status of the Wireguard peer. This could include values like ready, pending, or error.
	status?: string @go(Status)

	// A string field that provides additional information about the status of the Wireguard peer. This could include error messages or other information that helps to diagnose issues with the peer.
	message?: string @go(Message)
}

#Speed: {
	config?: int @go(Value)

	// +kubebuilder:validation:Enum=mbps;kbps
	unit?: string @go(Unit)
}

// WireguardPeer is the Schema for the wireguardpeers API
#WireguardPeer: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// The desired state of the peer.
	spec?: #WireguardPeerSpec @go(Spec)

	// A field that defines the observed state of the Wireguard peer. This includes fields like the current configuration and status of the peer.
	status?: #WireguardPeerStatus @go(Status)
}

// WireguardPeerList contains a list of WireguardPeer
#WireguardPeerList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#WireguardPeer] @go(Items,[]WireguardPeer)
}
