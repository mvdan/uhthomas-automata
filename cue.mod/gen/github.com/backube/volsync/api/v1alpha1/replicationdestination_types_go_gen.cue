// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/backube/volsync/api/v1alpha1

// +kubebuilder:validation:Required
package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/resource"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ReplicationDestinationTriggerSpec defines when a volume will be synchronized
// with the source.
#ReplicationDestinationTriggerSpec: {
	// schedule is a cronspec (https://en.wikipedia.org/wiki/Cron#Overview) that
	// can be used to schedule replication to occur at regular, time-based
	// intervals.
	// nolint:lll
	//+kubebuilder:validation:Pattern=`^(@(annually|yearly|monthly|weekly|daily|hourly))|((((\d+,)*\d+|(\d+(\/|-)\d+)|\*(\/\d+)?)\s?){5})$`
	//+optional
	schedule?: null | string @go(Schedule,*string)

	// manual is a string value that schedules a manual trigger.
	// Once a sync completes then status.lastManualSync is set to the same string value.
	// A consumer of a manual trigger should set spec.trigger.manual to a known value
	// and then wait for lastManualSync to be updated by the operator to the same value,
	// which means that the manual trigger will then pause and wait for further
	// updates to the trigger.
	//+optional
	manual?: string @go(Manual)
}

#ReplicationDestinationVolumeOptions: {
	// copyMethod describes how a point-in-time (PiT) image of the destination
	// volume should be created.
	copyMethod?: #CopyMethodType @go(CopyMethod)

	// capacity is the size of the destination volume to create.
	//+optional
	capacity?: null | resource.#Quantity @go(Capacity,*resource.Quantity)

	// storageClassName can be used to specify the StorageClass of the
	// destination volume. If not set, the default StorageClass will be used.
	//+optional
	storageClassName?: null | string @go(StorageClassName,*string)

	// accessModes specifies the access modes for the destination volume.
	//+kubebuilder:validation:MinItems=1
	//+optional
	accessModes?: [...corev1.#PersistentVolumeAccessMode] @go(AccessModes,[]corev1.PersistentVolumeAccessMode)

	// volumeSnapshotClassName can be used to specify the VSC to be used if
	// copyMethod is Snapshot. If not set, the default VSC is used.
	//+optional
	volumeSnapshotClassName?: null | string @go(VolumeSnapshotClassName,*string)

	// destinationPVC is a PVC to use as the transfer destination instead of
	// automatically provisioning one. Either this field or both capacity and
	// accessModes must be specified.
	//+optional
	destinationPVC?: null | string @go(DestinationPVC,*string)
}

#ReplicationDestinationRsyncSpec: {
	#ReplicationDestinationVolumeOptions

	// sshKeys is the name of a Secret that contains the SSH keys to be used for
	// authentication. If not provided, the keys will be generated.
	//+optional
	sshKeys?: null | string @go(SSHKeys,*string)

	// serviceType determines the Service type that will be created for incoming
	// SSH connections.
	//+optional
	serviceType?: null | corev1.#ServiceType @go(ServiceType,*corev1.ServiceType)

	// serviceAnnotations defines annotations that will be added to the
	// service created for incoming SSH connections.  If set, these annotations
	// will be used instead of any VolSync default values.
	//+optional
	serviceAnnotations?: null | {[string]: string} @go(ServiceAnnotations,*map[string]string)

	// address is the remote address to connect to for replication.
	//+optional
	address?: null | string @go(Address,*string)

	// port is the SSH port to connect to for replication. Defaults to 22.
	//+kubebuilder:validation:Minimum=0
	//+kubebuilder:validation:Maximum=65535
	//+optional
	port?: null | int32 @go(Port,*int32)

	// path is the remote path to rsync from. Defaults to "/"
	//+optional
	path?: null | string @go(Path,*string)

	// sshUser is the username for outgoing SSH connections. Defaults to "root".
	//+optional
	sshUser?: null | string @go(SSHUser,*string)

	// MoverServiceAccount allows specifying the name of the service account
	// that will be used by the data mover. This should only be used by advanced
	// users who want to override the service account normally used by the mover.
	// The service account needs to exist in the same namespace as the ReplicationDestination.
	//+optional
	moverServiceAccount?: null | string @go(MoverServiceAccount,*string)
}

// ReplicationDestinationRcloneSpec defines the field for rclone in replicationDestination.
#ReplicationDestinationRcloneSpec: {
	#ReplicationDestinationVolumeOptions

	//RcloneConfigSection is the section in rclone_config file to use for the current job.
	rcloneConfigSection?: null | string @go(RcloneConfigSection,*string)

	// RcloneDestPath is the remote path to sync to.
	rcloneDestPath?: null | string @go(RcloneDestPath,*string)

	// RcloneConfig is the rclone secret name
	rcloneConfig?: null | string @go(RcloneConfig,*string)

	// customCA is a custom CA that will be used to verify the remote
	customCA?: #CustomCASpec @go(CustomCA)

	// MoverSecurityContext allows specifying the PodSecurityContext that will
	// be used by the data mover
	moverSecurityContext?: null | corev1.#PodSecurityContext @go(MoverSecurityContext,*corev1.PodSecurityContext)

	// MoverServiceAccount allows specifying the name of the service account
	// that will be used by the data mover. This should only be used by advanced
	// users who want to override the service account normally used by the mover.
	// The service account needs to exist in the same namespace as the ReplicationDestination.
	//+optional
	moverServiceAccount?: null | string @go(MoverServiceAccount,*string)
}

// ReplicationDestinationExternalSpec defines the configuration when using an
// external replication provider.
#ReplicationDestinationExternalSpec: {
	// provider is the name of the external replication provider. The name
	// should be of the form: domain.com/provider.
	provider?: string @go(Provider)

	// parameters are provider-specific key/value configuration parameters. For
	// more information, please see the documentation of the specific
	// replication provider being used.
	parameters?: {[string]: string} @go(Parameters,map[string]string)
}

// ReplicationDestinationSpec defines the desired state of
// ReplicationDestination
#ReplicationDestinationSpec: {
	// trigger determines if/when the destination should attempt to synchronize
	// data with the source.
	//+optional
	trigger?: null | #ReplicationDestinationTriggerSpec @go(Trigger,*ReplicationDestinationTriggerSpec)

	// rsync defines the configuration when using Rsync-based replication.
	//+optional
	rsync?: null | #ReplicationDestinationRsyncSpec @go(Rsync,*ReplicationDestinationRsyncSpec)

	// rsyncTLS defines the configuration when using Rsync-based replication over TLS.
	//+optional
	rsyncTLS?: null | #ReplicationDestinationRsyncTLSSpec @go(RsyncTLS,*ReplicationDestinationRsyncTLSSpec)

	// rclone defines the configuration when using Rclone-based replication.
	//+optional
	rclone?: null | #ReplicationDestinationRcloneSpec @go(Rclone,*ReplicationDestinationRcloneSpec)

	// restic defines the configuration when using Restic-based replication.
	//+optional
	restic?: null | #ReplicationDestinationResticSpec @go(Restic,*ReplicationDestinationResticSpec)

	// external defines the configuration when using an external replication
	// provider.
	//+optional
	external?: null | #ReplicationDestinationExternalSpec @go(External,*ReplicationDestinationExternalSpec)

	// paused can be used to temporarily stop replication. Defaults to "false".
	//+optional
	paused?: bool @go(Paused)
}

#ReplicationDestinationRsyncStatus: {
	// sshKeys is the name of a Secret that contains the SSH keys to be used for
	// authentication. If not provided in .spec.rsync.sshKeys, SSH keys will be
	// generated and the appropriate keys for the remote side will be placed
	// here.
	//+optional
	sshKeys?: null | string @go(SSHKeys,*string)

	// address is the address to connect to for incoming SSH replication
	// connections.
	//+optional
	address?: null | string @go(Address,*string)

	// port is the SSH port to connect to for incoming SSH replication
	// connections.
	//+optional
	port?: null | int32 @go(Port,*int32)
}

#ReplicationDestinationResticCA: #CustomCASpec

// ReplicationDestinationResticSpec defines the field for restic in replicationDestination.
#ReplicationDestinationResticSpec: {
	#ReplicationDestinationVolumeOptions

	// Repository is the secret name containing repository info
	repository?: string @go(Repository)

	// customCA is a custom CA that will be used to verify the remote
	customCA?: #ReplicationDestinationResticCA @go(CustomCA)

	// cacheCapacity can be used to set the size of the restic metadata cache volume
	//+optional
	cacheCapacity?: null | resource.#Quantity @go(CacheCapacity,*resource.Quantity)

	// cacheStorageClassName can be used to set the StorageClass of the restic
	// metadata cache volume
	//+optional
	cacheStorageClassName?: null | string @go(CacheStorageClassName,*string)

	// accessModes can be used to set the accessModes of restic metadata cache volume
	//+optional
	cacheAccessModes?: [...corev1.#PersistentVolumeAccessMode] @go(CacheAccessModes,[]corev1.PersistentVolumeAccessMode)

	// Previous specifies the number of image to skip before selecting one to restore from
	//+optional
	previous?: null | int32 @go(Previous,*int32)

	// RestoreAsOf refers to the backup that is most recent as of that time.
	// +kubebuilder:validation:Format="date-time"
	//+optional
	restoreAsOf?: null | string @go(RestoreAsOf,*string)

	// MoverSecurityContext allows specifying the PodSecurityContext that will
	// be used by the data mover
	moverSecurityContext?: null | corev1.#PodSecurityContext @go(MoverSecurityContext,*corev1.PodSecurityContext)

	// MoverServiceAccount allows specifying the name of the service account
	// that will be used by the data mover. This should only be used by advanced
	// users who want to override the service account normally used by the mover.
	// The service account needs to exist in the same namespace as the ReplicationDestination.
	//+optional
	moverServiceAccount?: null | string @go(MoverServiceAccount,*string)
}

// ReplicationDestinationStatus defines the observed state of ReplicationDestination
#ReplicationDestinationStatus: {
	// lastSyncTime is the time of the most recent successful synchronization.
	//+optional
	lastSyncTime?: null | metav1.#Time @go(LastSyncTime,*metav1.Time)

	// lastSyncStartTime is the time the most recent synchronization started.
	//+optional
	lastSyncStartTime?: null | metav1.#Time @go(LastSyncStartTime,*metav1.Time)

	// lastSyncDuration is the amount of time required to send the most recent
	// update.
	//+optional
	lastSyncDuration?: null | metav1.#Duration @go(LastSyncDuration,*metav1.Duration)

	// nextSyncTime is the time when the next volume synchronization is
	// scheduled to start (for schedule-based synchronization).
	//+optional
	nextSyncTime?: null | metav1.#Time @go(NextSyncTime,*metav1.Time)

	// lastManualSync is set to the last spec.trigger.manual when the manual sync is done.
	//+optional
	lastManualSync?: string @go(LastManualSync)

	// latestImage in the object holding the most recent consistent replicated
	// image.
	//+optional
	latestImage?: null | corev1.#TypedLocalObjectReference @go(LatestImage,*corev1.TypedLocalObjectReference)

	// Logs/Summary from latest mover job
	//+optional
	latestMoverStatus?: null | #MoverStatus @go(LatestMoverStatus,*MoverStatus)

	// rsync contains status information for Rsync-based replication.
	rsync?: null | #ReplicationDestinationRsyncStatus @go(Rsync,*ReplicationDestinationRsyncStatus)

	// rsyncTLS contains status information for Rsync-based replication over TLS.
	rsyncTLS?: null | #ReplicationDestinationRsyncTLSStatus @go(RsyncTLS,*ReplicationDestinationRsyncTLSStatus)

	// external contains provider-specific status information. For more details,
	// please see the documentation of the specific replication provider being
	// used.
	//+optional
	external?: {[string]: string} @go(External,map[string]string)

	// conditions represent the latest available observations of the
	// destination's state.
	conditions?: [...metav1.#Condition] @go(Conditions,[]metav1.Condition)
}

// ReplicationDestination defines the destination for a replicated volume
// +kubebuilder:object:root=true
// +kubebuilder:resource:scope=Namespaced
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Last sync",type="string",format="date-time",JSONPath=`.status.lastSyncTime`
// +kubebuilder:printcolumn:name="Duration",type="string",JSONPath=`.status.lastSyncDuration`
// +kubebuilder:printcolumn:name="Next sync",type="string",format="date-time",JSONPath=`.status.nextSyncTime`
#ReplicationDestination: {
	metav1.#TypeMeta

	//+optional
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// spec is the desired state of the ReplicationDestination, including the
	// replication method to use and its configuration.
	spec?: #ReplicationDestinationSpec @go(Spec)

	// status is the observed state of the ReplicationDestination as determined
	// by the controller.
	//+optional
	status?: null | #ReplicationDestinationStatus @go(Status,*ReplicationDestinationStatus)
}

// ReplicationDestinationList contains a list of ReplicationDestination
// +kubebuilder:object:root=true
#ReplicationDestinationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ReplicationDestination] @go(Items,[]ReplicationDestination)
}
