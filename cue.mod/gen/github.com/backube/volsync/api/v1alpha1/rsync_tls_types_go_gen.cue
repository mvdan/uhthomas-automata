// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/backube/volsync/api/v1alpha1

// +kubebuilder:validation:Required
package v1alpha1

import corev1 "k8s.io/api/core/v1"

#ReplicationSourceRsyncTLSSpec: {
	#ReplicationSourceVolumeOptions

	// keySecret is the name of a Secret that contains the TLS pre-shared key to
	// be used for authentication. If not provided, the key will be generated.
	//+optional
	keySecret?: null | string @go(KeySecret,*string)

	// address is the remote address to connect to for replication.
	//+optional
	address?: null | string @go(Address,*string)

	// port is the port to connect to for replication. Defaults to 8000.
	//+kubebuilder:validation:Minimum=0
	//+kubebuilder:validation:Maximum=65535
	//+optional
	port?: null | int32 @go(Port,*int32)

	// MoverSecurityContext allows specifying the PodSecurityContext that will
	// be used by the data mover
	moverSecurityContext?: null | corev1.#PodSecurityContext @go(MoverSecurityContext,*corev1.PodSecurityContext)

	// MoverServiceAccount allows specifying the name of the service account
	// that will be used by the data mover. This should only be used by advanced
	// users who want to override the service account normally used by the mover.
	// The service account needs to exist in the same namespace as the ReplicationSource.
	//+optional
	moverServiceAccount?: null | string @go(MoverServiceAccount,*string)
}

#ReplicationSourceRsyncTLSStatus: {
	// keySecret is the name of a Secret that contains the TLS pre-shared key to
	// be used for authentication. If not provided in .spec.rsyncTLS.keySecret,
	// the key Secret will be generated and named here.
	//+optional
	keySecret?: null | string @go(KeySecret,*string)
}

#ReplicationDestinationRsyncTLSSpec: {
	#ReplicationDestinationVolumeOptions

	// keySecret is the name of a Secret that contains the TLS pre-shared key to
	// be used for authentication. If not provided, the key will be generated.
	//+optional
	keySecret?: null | string @go(KeySecret,*string)

	// serviceType determines the Service type that will be created for incoming
	// TLS connections.
	//+optional
	serviceType?: null | corev1.#ServiceType @go(ServiceType,*corev1.ServiceType)

	// serviceAnnotations defines annotations that will be added to the
	// service created for incoming SSH connections.  If set, these annotations
	// will be used instead of any VolSync default values.
	//+optional
	serviceAnnotations?: null | {[string]: string} @go(ServiceAnnotations,*map[string]string)

	// MoverSecurityContext allows specifying the PodSecurityContext that will
	// be used by the data mover
	moverSecurityContext?: null | corev1.#PodSecurityContext @go(MoverSecurityContext,*corev1.PodSecurityContext)

	// MoverServiceAccount allows specifying the name of the service account
	// that will be used by the data mover. This should only be used by advanced
	// users who want to override the service account normally used by the mover.
	// The service account needs to exist in the same namespace as the ReplicationDestination.
	//+optional
	moverServiceAccount?: null | string @go(MoverServiceAccount,*string)
}

#ReplicationDestinationRsyncTLSStatus: {
	// keySecret is the name of a Secret that contains the TLS pre-shared key to
	// be used for authentication. If not provided in .spec.rsyncTLS.keySecret,
	// the key Secret will be generated and named here.
	//+optional
	keySecret?: null | string @go(KeySecret,*string)

	// address is the address to connect to for incoming TLS connections.
	//+optional
	address?: null | string @go(Address,*string)

	// port is the port to connect to for incoming replication connections.
	//+optional
	port?: null | int32 @go(Port,*int32)
}
