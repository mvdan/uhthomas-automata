// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crunchydata/postgres-operator/pkg/apis/postgres-operator.crunchydata.com/v1beta1

package v1beta1

import corev1 "k8s.io/api/core/v1"

// PGAdminConfiguration represents pgAdmin configuration files.
#PGAdminConfiguration: {
	// Files allows the user to mount projected volumes into the pgAdmin
	// container so that files can be referenced by pgAdmin as needed.
	files?: [...corev1.#VolumeProjection] @go(Files,[]corev1.VolumeProjection)

	// A Secret containing the value for the LDAP_BIND_PASSWORD setting.
	// More info: https://www.pgadmin.org/docs/pgadmin4/latest/ldap.html
	// +optional
	ldapBindPassword?: null | corev1.#SecretKeySelector @go(LDAPBindPassword,*corev1.SecretKeySelector)

	// Settings for the pgAdmin server process. Keys should be uppercase and
	// values must be constants.
	// More info: https://www.pgadmin.org/docs/pgadmin4/latest/config_py.html
	// +optional
	// +kubebuilder:pruning:PreserveUnknownFields
	// +kubebuilder:validation:Schemaless
	// +kubebuilder:validation:Type=object
	settings?: #SchemalessObject @go(Settings)
}

// PGAdminPodSpec defines the desired state of a pgAdmin deployment.
#PGAdminPodSpec: {
	// +optional
	metadata?: null | #Metadata @go(Metadata,*Metadata)

	// Scheduling constraints of a pgAdmin pod. Changing this value causes
	// pgAdmin to restart.
	// More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
	// +optional
	affinity?: null | corev1.#Affinity @go(Affinity,*corev1.Affinity)

	// Configuration settings for the pgAdmin process. Changes to any of these
	// values will be loaded without validation. Be careful, as
	// you may put pgAdmin into an unusable state.
	// +optional
	config?: #PGAdminConfiguration @go(Config)

	// Defines a PersistentVolumeClaim for pgAdmin data.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
	// +kubebuilder:validation:Required
	dataVolumeClaimSpec: corev1.#PersistentVolumeClaimSpec @go(DataVolumeClaimSpec)

	// Name of a container image that can run pgAdmin 4. Changing this value causes
	// pgAdmin to restart. The image may also be set using the RELATED_IMAGE_PGADMIN
	// environment variable.
	// More info: https://kubernetes.io/docs/concepts/containers/images
	// +optional
	image?: string @go(Image)

	// Priority class name for the pgAdmin pod. Changing this value causes pgAdmin
	// to restart.
	// More info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
	// +optional
	priorityClassName?: null | string @go(PriorityClassName,*string)

	// Number of desired pgAdmin pods.
	// +optional
	// +kubebuilder:default=1
	// +kubebuilder:validation:Minimum=0
	// +kubebuilder:validation:Maximum=1
	replicas?: null | int32 @go(Replicas,*int32)

	// Compute resources of a pgAdmin container. Changing this value causes
	// pgAdmin to restart.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
	// +optional
	resources?: corev1.#ResourceRequirements @go(Resources)

	// Specification of the service that exposes pgAdmin.
	// +optional
	service?: null | #ServiceSpec @go(Service,*ServiceSpec)

	// Tolerations of a pgAdmin pod. Changing this value causes pgAdmin to restart.
	// More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration
	// +optional
	tolerations?: [...corev1.#Toleration] @go(Tolerations,[]corev1.Toleration)

	// Topology spread constraints of a pgAdmin pod. Changing this value causes
	// pgAdmin to restart.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
	// +optional
	topologySpreadConstraints?: [...corev1.#TopologySpreadConstraint] @go(TopologySpreadConstraints,[]corev1.TopologySpreadConstraint)
}

// PGAdminPodStatus represents the observed state of a pgAdmin deployment.
#PGAdminPodStatus: {
	// Hash that indicates which users have been installed into pgAdmin.
	usersRevision?: string @go(UsersRevision)
}
