// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crunchydata/postgres-operator/pkg/apis/postgres-operator.crunchydata.com/v1beta1

package v1beta1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// PGUpgradeSpec defines the desired state of PGUpgrade
#PGUpgradeSpec: {
	// +optional
	metadata?: null | #Metadata @go(Metadata,*Metadata)

	// The name of the cluster to be updated
	// +required
	// +kubebuilder:validation:MinLength=1
	postgresClusterName: string @go(PostgresClusterName)

	// The image name to use for major PostgreSQL upgrades.
	// +optional
	image?: null | string @go(Image,*string)

	// ImagePullPolicy is used to determine when Kubernetes will attempt to
	// pull (download) container images.
	// More info: https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
	// +kubebuilder:validation:Enum={Always,Never,IfNotPresent}
	// +optional
	imagePullPolicy?: corev1.#PullPolicy @go(ImagePullPolicy)

	// The image pull secrets used to pull from a private registry.
	// Changing this value causes all running PGUpgrade pods to restart.
	// https://k8s.io/docs/tasks/configure-pod-container/pull-image-private-registry/
	// +optional
	imagePullSecrets?: [...corev1.#LocalObjectReference] @go(ImagePullSecrets,[]corev1.LocalObjectReference)

	// The major version of PostgreSQL before the upgrade.
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:Minimum=10
	// +kubebuilder:validation:Maximum=15
	fromPostgresVersion: int @go(FromPostgresVersion)

	// The major version of PostgreSQL to be upgraded to.
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:Minimum=10
	// +kubebuilder:validation:Maximum=15
	toPostgresVersion: int @go(ToPostgresVersion)

	// The image name to use for PostgreSQL containers after upgrade.
	// When omitted, the value comes from an operator environment variable.
	// +optional
	toPostgresImage?: string @go(ToPostgresImage)

	// Resource requirements for the PGUpgrade container.
	// +optional
	resources?: corev1.#ResourceRequirements @go(Resources)

	// Scheduling constraints of the PGUpgrade pod.
	// More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
	// +optional
	affinity?: null | corev1.#Affinity @go(Affinity,*corev1.Affinity)

	// Priority class name for the PGUpgrade pod. Changing this
	// value causes PGUpgrade pod to restart.
	// More info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
	// +optional
	priorityClassName?: null | string @go(PriorityClassName,*string)

	// Tolerations of the PGUpgrade pod.
	// More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration
	// +optional
	tolerations?: [...corev1.#Toleration] @go(Tolerations,[]corev1.Toleration)
}

// PGUpgradeStatus defines the observed state of PGUpgrade
#PGUpgradeStatus: {
	// conditions represent the observations of PGUpgrade's current state.
	// +optional
	// +listType=map
	// +listMapKey=type
	conditions?: [...metav1.#Condition] @go(Conditions,[]metav1.Condition)

	// observedGeneration represents the .metadata.generation on which the status was based.
	// +optional
	// +kubebuilder:validation:Minimum=0
	observedGeneration?: int64 @go(ObservedGeneration)
}

// PGUpgrade is the Schema for the pgupgrades API
#PGUpgrade: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec?:     #PGUpgradeSpec     @go(Spec)
	status?:   #PGUpgradeStatus   @go(Status)
}

// PGUpgradeList contains a list of PGUpgrade
#PGUpgradeList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#PGUpgrade] @go(Items,[]PGUpgrade)
}
