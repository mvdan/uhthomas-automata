// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crunchydata/postgres-operator/pkg/apis/postgres-operator.crunchydata.com/v1beta1

package v1beta1

import (
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/util/intstr"
)

// PGBouncerConfiguration represents PgBouncer configuration files.
#PGBouncerConfiguration: {
	// Files to mount under "/etc/pgbouncer". When specified, settings in the
	// "pgbouncer.ini" file are loaded before all others. From there, other
	// files may be included by absolute path. Changing these references causes
	// PgBouncer to restart, but changes to the file contents are automatically
	// reloaded.
	// More info: https://www.pgbouncer.org/config.html#include-directive
	// +optional
	files?: [...corev1.#VolumeProjection] @go(Files,[]corev1.VolumeProjection)

	// Settings that apply to the entire PgBouncer process.
	// More info: https://www.pgbouncer.org/config.html
	// +optional
	global?: {[string]: string} @go(Global,map[string]string)

	// PgBouncer database definitions. The key is the database requested by a
	// client while the value is a libpq-styled connection string. The special
	// key "*" acts as a fallback. When this field is empty, PgBouncer is
	// configured with a single "*" entry that connects to the primary
	// PostgreSQL instance.
	// More info: https://www.pgbouncer.org/config.html#section-databases
	// +optional
	databases?: {[string]: string} @go(Databases,map[string]string)

	// Connection settings specific to particular users.
	// More info: https://www.pgbouncer.org/config.html#section-users
	// +optional
	users?: {[string]: string} @go(Users,map[string]string)
}

// PGBouncerPodSpec defines the desired state of a PgBouncer connection pooler.
#PGBouncerPodSpec: {
	// +optional
	metadata?: null | #Metadata @go(Metadata,*Metadata)

	// Scheduling constraints of a PgBouncer pod. Changing this value causes
	// PgBouncer to restart.
	// More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
	// +optional
	affinity?: null | corev1.#Affinity @go(Affinity,*corev1.Affinity)

	// Configuration settings for the PgBouncer process. Changes to any of these
	// values will be automatically reloaded without validation. Be careful, as
	// you may put PgBouncer into an unusable state.
	// More info: https://www.pgbouncer.org/usage.html#reload
	// +optional
	config?: #PGBouncerConfiguration @go(Config)

	// Custom sidecars for a PgBouncer pod. Changing this value causes
	// PgBouncer to restart.
	// +optional
	containers?: [...corev1.#Container] @go(Containers,[]corev1.Container)

	// A secret projection containing a certificate and key with which to encrypt
	// connections to PgBouncer. The "tls.crt", "tls.key", and "ca.crt" paths must
	// be PEM-encoded certificates and keys. Changing this value causes PgBouncer
	// to restart.
	// More info: https://kubernetes.io/docs/concepts/configuration/secret/#projection-of-secret-keys-to-specific-paths
	// +optional
	customTLSSecret?: null | corev1.#SecretProjection @go(CustomTLSSecret,*corev1.SecretProjection)

	// Name of a container image that can run PgBouncer 1.15 or newer. Changing
	// this value causes PgBouncer to restart. The image may also be set using
	// the RELATED_IMAGE_PGBOUNCER environment variable.
	// More info: https://kubernetes.io/docs/concepts/containers/images
	// +optional
	image?: string @go(Image)

	// Port on which PgBouncer should listen for client connections. Changing
	// this value causes PgBouncer to restart.
	// +optional
	// +kubebuilder:default=5432
	// +kubebuilder:validation:Minimum=1024
	port?: null | int32 @go(Port,*int32)

	// Priority class name for the pgBouncer pod. Changing this value causes
	// PostgreSQL to restart.
	// More info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
	// +optional
	priorityClassName?: null | string @go(PriorityClassName,*string)

	// Number of desired PgBouncer pods.
	// +optional
	// +kubebuilder:default=1
	// +kubebuilder:validation:Minimum=0
	replicas?: null | int32 @go(Replicas,*int32)

	// Minimum number of pods that should be available at a time.
	// Defaults to one when the replicas field is greater than one.
	// +optional
	minAvailable?: null | intstr.#IntOrString @go(MinAvailable,*intstr.IntOrString)

	// Compute resources of a PgBouncer container. Changing this value causes
	// PgBouncer to restart.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
	// +optional
	resources?: corev1.#ResourceRequirements @go(Resources)

	// Specification of the service that exposes PgBouncer.
	// +optional
	service?: null | #ServiceSpec @go(Service,*ServiceSpec)

	// Configuration for pgBouncer sidecar containers
	// +optional
	sidecars?: null | #PGBouncerSidecars @go(Sidecars,*PGBouncerSidecars)

	// Tolerations of a PgBouncer pod. Changing this value causes PgBouncer to
	// restart.
	// More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration
	// +optional
	tolerations?: [...corev1.#Toleration] @go(Tolerations,[]corev1.Toleration)

	// Topology spread constraints of a PgBouncer pod. Changing this value causes
	// PgBouncer to restart.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
	// +optional
	topologySpreadConstraints?: [...corev1.#TopologySpreadConstraint] @go(TopologySpreadConstraints,[]corev1.TopologySpreadConstraint)
}

// PGBouncerSidecars defines the configuration for pgBouncer sidecar containers
#PGBouncerSidecars: {
	// Defines the configuration for the pgBouncer config sidecar container
	// +optional
	pgbouncerConfig?: null | #Sidecar @go(PGBouncerConfig,*Sidecar)
}

#PGBouncerPodStatus: {
	// Identifies the revision of PgBouncer assets that have been installed into
	// PostgreSQL.
	postgresRevision?: string @go(PostgreSQLRevision)

	// Total number of ready pods.
	readyReplicas?: int32 @go(ReadyReplicas)

	// Total number of non-terminated pods.
	replicas?: int32 @go(Replicas)
}
