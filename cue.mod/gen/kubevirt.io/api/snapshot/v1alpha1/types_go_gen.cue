// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go kubevirt.io/api/snapshot/v1alpha1

package v1alpha1

import (
	"time"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/types"
	"kubevirt.io/api/core/v1"
)

#DefaultFailureDeadline: time.#Duration & 300000000000

// VirtualMachineSnapshot defines the operation of snapshotting a VM
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#VirtualMachineSnapshot: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta          @go(ObjectMeta)
	spec:      #VirtualMachineSnapshotSpec @go(Spec)

	// +optional
	status?: null | #VirtualMachineSnapshotStatus @go(Status,*VirtualMachineSnapshotStatus)
}

// DeletionPolicy defines that to do with VirtualMachineSnapshot
// when VirtualMachineSnapshot is deleted
#DeletionPolicy: string // #enumDeletionPolicy

#enumDeletionPolicy:
	#VirtualMachineSnapshotContentDelete |
	#VirtualMachineSnapshotContentRetain

// VirtualMachineSnapshotContentDelete causes the
// VirtualMachineSnapshotContent to be deleted
#VirtualMachineSnapshotContentDelete: #DeletionPolicy & "Delete"

// VirtualMachineSnapshotContentRetain causes the
// VirtualMachineSnapshotContent to stay around
#VirtualMachineSnapshotContentRetain: #DeletionPolicy & "Retain"

// VirtualMachineSnapshotSpec is the spec for a VirtualMachineSnapshot resource
#VirtualMachineSnapshotSpec: {
	source: corev1.#TypedLocalObjectReference @go(Source)

	// +optional
	deletionPolicy?: null | #DeletionPolicy @go(DeletionPolicy,*DeletionPolicy)

	// This time represents the number of seconds we permit the vm snapshot
	// to take. In case we pass this deadline we mark this snapshot
	// as failed.
	// Defaults to DefaultFailureDeadline - 5min
	// +optional
	failureDeadline?: null | metav1.#Duration @go(FailureDeadline,*metav1.Duration)
}

// Indication is a way to indicate the state of the vm when taking the snapshot
#Indication: string // #enumIndication

#enumIndication:
	#VMSnapshotOnlineSnapshotIndication |
	#VMSnapshotNoGuestAgentIndication |
	#VMSnapshotGuestAgentIndication

#VMSnapshotOnlineSnapshotIndication: #Indication & "Online"
#VMSnapshotNoGuestAgentIndication:   #Indication & "NoGuestAgent"
#VMSnapshotGuestAgentIndication:     #Indication & "GuestAgent"

// VirtualMachineSnapshotPhase is the current phase of the VirtualMachineSnapshot
#VirtualMachineSnapshotPhase: string // #enumVirtualMachineSnapshotPhase

#enumVirtualMachineSnapshotPhase:
	#PhaseUnset |
	#InProgress |
	#Succeeded |
	#Failed |
	#Deleting |
	#Unknown

#PhaseUnset: #VirtualMachineSnapshotPhase & ""
#InProgress: #VirtualMachineSnapshotPhase & "InProgress"
#Succeeded:  #VirtualMachineSnapshotPhase & "Succeeded"
#Failed:     #VirtualMachineSnapshotPhase & "Failed"
#Deleting:   #VirtualMachineSnapshotPhase & "Deleting"
#Unknown:    #VirtualMachineSnapshotPhase & "Unknown"

// VirtualMachineSnapshotStatus is the status for a VirtualMachineSnapshot resource
#VirtualMachineSnapshotStatus: {
	// +optional
	sourceUID?: null | types.#UID @go(SourceUID,*types.UID)

	// +optional
	virtualMachineSnapshotContentName?: null | string @go(VirtualMachineSnapshotContentName,*string)

	// +optional
	// +nullable
	creationTime?: null | metav1.#Time @go(CreationTime,*metav1.Time)

	// +optional
	phase?: #VirtualMachineSnapshotPhase @go(Phase)

	// +optional
	readyToUse?: null | bool @go(ReadyToUse,*bool)

	// +optional
	error?: null | #Error @go(Error,*Error)

	// +optional
	conditions?: [...#Condition] @go(Conditions,[]Condition)

	// +optional
	// +listType=set
	indications?: [...#Indication] @go(Indications,[]Indication)

	// +optional
	snapshotVolumes?: null | #SnapshotVolumesLists @go(SnapshotVolumes,*SnapshotVolumesLists)
}

// SnapshotVolumesLists includes the list of volumes which were included in the snapshot and volumes which were excluded from the snapshot
#SnapshotVolumesLists: {
	// +optional
	// +listType=set
	includedVolumes?: [...string] @go(IncludedVolumes,[]string)

	// +optional
	// +listType=set
	excludedVolumes?: [...string] @go(ExcludedVolumes,[]string)
}

// Error is the last error encountered during the snapshot/restore
#Error: {
	// +optional
	time?: null | metav1.#Time @go(Time,*metav1.Time)

	// +optional
	message?: null | string @go(Message,*string)
}

// ConditionType is the const type for Conditions
#ConditionType: string // #enumConditionType

#enumConditionType:
	#ConditionReady |
	#ConditionProgressing |
	#ConditionFailure

// ConditionReady is the "ready" condition type
#ConditionReady: #ConditionType & "Ready"

// ConditionProgressing is the "progressing" condition type
#ConditionProgressing: #ConditionType & "Progressing"

// ConditionFailure is the "failure" condition type
#ConditionFailure: #ConditionType & "Failure"

// Condition defines conditions
#Condition: {
	type:   #ConditionType          @go(Type)
	status: corev1.#ConditionStatus @go(Status)

	// +optional
	// +nullable
	lastProbeTime?: metav1.#Time @go(LastProbeTime)

	// +optional
	// +nullable
	lastTransitionTime?: metav1.#Time @go(LastTransitionTime)

	// +optional
	reason?: string @go(Reason)

	// +optional
	message?: string @go(Message)
}

// VirtualMachineSnapshotList is a list of VirtualMachineSnapshot resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#VirtualMachineSnapshotList: {
	metav1.#TypeMeta
	metadata: metav1.#ListMeta @go(ListMeta)
	items: [...#VirtualMachineSnapshot] @go(Items,[]VirtualMachineSnapshot)
}

// VirtualMachineSnapshotContent contains the snapshot data
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#VirtualMachineSnapshotContent: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta                 @go(ObjectMeta)
	spec:      #VirtualMachineSnapshotContentSpec @go(Spec)

	// +optional
	status?: null | #VirtualMachineSnapshotContentStatus @go(Status,*VirtualMachineSnapshotContentStatus)
}

// VirtualMachineSnapshotContentSpec is the spec for a VirtualMachineSnapshotContent resource
#VirtualMachineSnapshotContentSpec: {
	virtualMachineSnapshotName?: null | string @go(VirtualMachineSnapshotName,*string)
	source:                      #SourceSpec   @go(Source)

	// +optional
	volumeBackups?: [...#VolumeBackup] @go(VolumeBackups,[]VolumeBackup)
}

#VirtualMachine: {
	// +kubebuilder:pruning:PreserveUnknownFields
	// +nullable
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// VirtualMachineSpec contains the VirtualMachine specification.
	spec?: v1.#VirtualMachineSpec @go(Spec)

	// Status holds the current state of the controller and brief information
	// about its associated VirtualMachineInstance
	status?: v1.#VirtualMachineStatus @go(Status)
}

// SourceSpec contains the appropriate spec for the resource being snapshotted
#SourceSpec: {
	// +optional
	virtualMachine?: null | #VirtualMachine @go(VirtualMachine,*VirtualMachine)
}

#PersistentVolumeClaim: {
	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +kubebuilder:pruning:PreserveUnknownFields
	// +optional
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Spec defines the desired characteristics of a volume requested by a pod author.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	// +optional
	spec?: corev1.#PersistentVolumeClaimSpec @go(Spec)
}

// VolumeBackup contains the data neeed to restore a PVC
#VolumeBackup: {
	volumeName:            string                 @go(VolumeName)
	persistentVolumeClaim: #PersistentVolumeClaim @go(PersistentVolumeClaim)

	// +optional
	volumeSnapshotName?: null | string @go(VolumeSnapshotName,*string)
}

// VirtualMachineSnapshotContentStatus is the status for a VirtualMachineSnapshotStatus resource
#VirtualMachineSnapshotContentStatus: {
	// +optional
	// +nullable
	creationTime?: null | metav1.#Time @go(CreationTime,*metav1.Time)

	// +optional
	readyToUse?: null | bool @go(ReadyToUse,*bool)

	// +optional
	error?: null | #Error @go(Error,*Error)

	// +optional
	volumeSnapshotStatus?: [...#VolumeSnapshotStatus] @go(VolumeSnapshotStatus,[]VolumeSnapshotStatus)
}

// VirtualMachineSnapshotContentList is a list of VirtualMachineSnapshot resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#VirtualMachineSnapshotContentList: {
	metav1.#TypeMeta
	metadata: metav1.#ListMeta @go(ListMeta)
	items: [...#VirtualMachineSnapshotContent] @go(Items,[]VirtualMachineSnapshotContent)
}

// VolumeSnapshotStatus is the status of a VolumeSnapshot
#VolumeSnapshotStatus: {
	volumeSnapshotName: string @go(VolumeSnapshotName)

	// +optional
	// +nullable
	creationTime?: null | metav1.#Time @go(CreationTime,*metav1.Time)

	// +optional
	readyToUse?: null | bool @go(ReadyToUse,*bool)

	// +optional
	error?: null | #Error @go(Error,*Error)
}

// VirtualMachineRestore defines the operation of restoring a VM
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#VirtualMachineRestore: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta         @go(ObjectMeta)
	spec:      #VirtualMachineRestoreSpec @go(Spec)

	// +optional
	status?: null | #VirtualMachineRestoreStatus @go(Status,*VirtualMachineRestoreStatus)
}

// VirtualMachineRestoreSpec is the spec for a VirtualMachineRestoreresource
#VirtualMachineRestoreSpec: {
	// initially only VirtualMachine type supported
	target:                     corev1.#TypedLocalObjectReference @go(Target)
	virtualMachineSnapshotName: string                            @go(VirtualMachineSnapshotName)

	// If the target for the restore does not exist, it will be created. Patches holds JSON patches that would be
	// applied to the target manifest before it's created. Patches should fit the target's Kind.
	//
	// Example for a patch: {"op": "replace", "path": "/metadata/name", "value": "new-vm-name"}
	//
	// +optional
	// +listType=atomic
	patches?: [...string] @go(Patches,[]string)
}

// VirtualMachineRestoreStatus is the spec for a VirtualMachineRestoreresource
#VirtualMachineRestoreStatus: {
	// +optional
	restores?: [...#VolumeRestore] @go(Restores,[]VolumeRestore)

	// +optional
	restoreTime?: null | metav1.#Time @go(RestoreTime,*metav1.Time)

	// +optional
	deletedDataVolumes?: [...string] @go(DeletedDataVolumes,[]string)

	// +optional
	complete?: null | bool @go(Complete,*bool)

	// +optional
	conditions?: [...#Condition] @go(Conditions,[]Condition)
}

// VolumeRestore contains the data neeed to restore a PVC
#VolumeRestore: {
	volumeName:            string @go(VolumeName)
	persistentVolumeClaim: string @go(PersistentVolumeClaimName)
	volumeSnapshotName:    string @go(VolumeSnapshotName)

	// +optional
	dataVolumeName?: null | string @go(DataVolumeName,*string)
}

// VirtualMachineRestoreList is a list of VirtualMachineRestore resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#VirtualMachineRestoreList: {
	metav1.#TypeMeta
	metadata: metav1.#ListMeta @go(ListMeta)
	items: [...#VirtualMachineRestore] @go(Items,[]VirtualMachineRestore)
}
