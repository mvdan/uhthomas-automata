// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go kubevirt.io/api/instancetype/v1alpha2

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"kubevirt.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/resource"
)

// VirtualMachineInstancetype resource contains quantitative and resource related VirtualMachine configuration
// that can be used by multiple VirtualMachine resources.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +genclient
#VirtualMachineInstancetype: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Required spec describing the instancetype
	spec: #VirtualMachineInstancetypeSpec @go(Spec)
}

// VirtualMachineInstancetypeList is a list of VirtualMachineInstancetype resources.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#VirtualMachineInstancetypeList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VirtualMachineInstancetype] @go(Items,[]VirtualMachineInstancetype)
}

// VirtualMachineClusterInstancetype is a cluster scoped version of VirtualMachineInstancetype resource.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +genclient
// +genclient:nonNamespaced
#VirtualMachineClusterInstancetype: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Required spec describing the instancetype
	spec: #VirtualMachineInstancetypeSpec @go(Spec)
}

// VirtualMachineClusterInstancetypeList is a list of VirtualMachineClusterInstancetype resources.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#VirtualMachineClusterInstancetypeList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VirtualMachineClusterInstancetype] @go(Items,[]VirtualMachineClusterInstancetype)
}

// VirtualMachineInstancetypeSpec is a description of the VirtualMachineInstancetype or VirtualMachineClusterInstancetype.
//
// CPU and Memory are required attributes with both requiring that their Guest attribute is defined, ensuring a number of vCPUs and amount of RAM is always provided by each instancetype.
#VirtualMachineInstancetypeSpec: {
	// Required CPU related attributes of the instancetype.
	cpu: #CPUInstancetype @go(CPU)

	// Required Memory related attributes of the instancetype.
	memory: #MemoryInstancetype @go(Memory)

	// Optionally defines any GPU devices associated with the instancetype.
	//
	// +optional
	// +listType=atomic
	gpus?: [...v1.#GPU] @go(GPUs,[]v1.GPU)

	// Optionally defines any HostDevices associated with the instancetype.
	//
	// +optional
	// +listType=atomic
	hostDevices?: [...v1.#HostDevice] @go(HostDevices,[]v1.HostDevice)

	// Optionally defines the IOThreadsPolicy to be used by the instancetype.
	//
	// +optional
	ioThreadsPolicy?: null | v1.#IOThreadsPolicy @go(IOThreadsPolicy,*v1.IOThreadsPolicy)

	// Optionally defines the LaunchSecurity to be used by the instancetype.
	//
	// +optional
	launchSecurity?: null | v1.#LaunchSecurity @go(LaunchSecurity,*v1.LaunchSecurity)
}

// CPUInstancetype contains the CPU related configuration of a given VirtualMachineInstancetypeSpec.
//
// Guest is a required attribute and defines the number of vCPUs to be exposed to the guest by the instancetype.
#CPUInstancetype: {
	// Required number of vCPUs to expose to the guest.
	//
	// The resulting CPU topology being derived from the optional PreferredCPUTopology attribute of CPUPreferences that itself defaults to PreferCores.
	guest: uint32 @go(Guest)

	// Model specifies the CPU model inside the VMI.
	// List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map.
	// It is possible to specify special cases like "host-passthrough" to get the same CPU as the node
	// and "host-model" to get CPU closest to the node one.
	// Defaults to host-model.
	// +optional
	model?: string @go(Model)

	// DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node
	// with enough dedicated pCPUs and pin the vCPUs to it.
	// +optional
	dedicatedCPUPlacement?: bool @go(DedicatedCPUPlacement)

	// NUMA allows specifying settings for the guest NUMA topology
	// +optional
	numa?: null | v1.#NUMA @go(NUMA,*v1.NUMA)

	// IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place
	// the emulator thread on it.
	// +optional
	isolateEmulatorThread?: bool @go(IsolateEmulatorThread)

	// Realtime instructs the virt-launcher to tune the VMI for lower latency, optional for real time workloads
	// +optional
	realtime?: null | v1.#Realtime @go(Realtime,*v1.Realtime)
}

// MemoryInstancetype contains the Memory related configuration of a given VirtualMachineInstancetypeSpec.
//
// Guest is a required attribute and defines the amount of RAM to be exposed to the guest by the instancetype.
#MemoryInstancetype: {
	// Required amount of memory which is visible inside the guest OS.
	guest: resource.#Quantity @go(Guest)

	// Optionally enables the use of hugepages for the VirtualMachineInstance instead of regular memory.
	// +optional
	hugepages?: null | v1.#Hugepages @go(Hugepages,*v1.Hugepages)
}

// VirtualMachinePreference resource contains optional preferences related to the VirtualMachine.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +genclient
#VirtualMachinePreference: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Required spec describing the preferences
	spec: #VirtualMachinePreferenceSpec @go(Spec)
}

// VirtualMachinePreferenceList is a list of VirtualMachinePreference resources.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#VirtualMachinePreferenceList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)

	// +listType=set
	items: [...#VirtualMachinePreference] @go(Items,[]VirtualMachinePreference)
}

// VirtualMachineClusterPreference is a cluster scoped version of the VirtualMachinePreference resource.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +genclient
// +genclient:nonNamespaced
#VirtualMachineClusterPreference: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Required spec describing the preferences
	spec: #VirtualMachinePreferenceSpec @go(Spec)
}

// VirtualMachineClusterPreferenceList is a list of VirtualMachineClusterPreference resources.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#VirtualMachineClusterPreferenceList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)

	// +listType=set
	items: [...#VirtualMachineClusterPreference] @go(Items,[]VirtualMachineClusterPreference)
}

// VirtualMachinePreferenceSpec is a description of the VirtualMachinePreference or VirtualMachineClusterPreference.
#VirtualMachinePreferenceSpec: {
	// Clock optionally defines preferences associated with the Clock attribute of a VirtualMachineInstance DomainSpec
	//
	//+optional
	clock?: null | #ClockPreferences @go(Clock,*ClockPreferences)

	// CPU optionally defines preferences associated with the CPU attribute of a VirtualMachineInstance DomainSpec
	//
	//+optional
	cpu?: null | #CPUPreferences @go(CPU,*CPUPreferences)

	// Devices optionally defines preferences associated with the Devices attribute of a VirtualMachineInstance DomainSpec
	//
	//+optional
	devices?: null | #DevicePreferences @go(Devices,*DevicePreferences)

	// Features optionally defines preferences associated with the Features attribute of a VirtualMachineInstance DomainSpec
	//
	//+optional
	features?: null | #FeaturePreferences @go(Features,*FeaturePreferences)

	// Firmware optionally defines preferences associated with the Firmware attribute of a VirtualMachineInstance DomainSpec
	//
	//+optional
	firmware?: null | #FirmwarePreferences @go(Firmware,*FirmwarePreferences)

	// Machine optionally defines preferences associated with the Machine attribute of a VirtualMachineInstance DomainSpec
	//
	//+optional
	machine?: null | #MachinePreferences @go(Machine,*MachinePreferences)

	// Volumes optionally defines preferences associated with the Volumes attribute of a VirtualMachineInstace DomainSpec
	//
	//+optional
	volumes?: null | #VolumePreferences @go(Volumes,*VolumePreferences)
}

#VolumePreferences: {
	// PreffereedStorageClassName optionally defines the preferred storageClass
	//
	//+optional
	preferredStorageClassName?: string @go(PreferredStorageClassName)
}

// PreferredCPUTopology defines a preferred CPU topology to be exposed to the guest
#PreferredCPUTopology: string // #enumPreferredCPUTopology

#enumPreferredCPUTopology:
	#PreferCores |
	#PreferSockets |
	#PreferThreads

// Prefer vCPUs to be exposed as cores to the guest
#PreferCores: #PreferredCPUTopology & "preferCores"

// Prefer vCPUs to be exposed as sockets to the guest, this is the default for the PreferredCPUTopology attribute of CPUPreferences.
#PreferSockets: #PreferredCPUTopology & "preferSockets"

// Prefer vCPUs to be exposed as threads to the guest
#PreferThreads: #PreferredCPUTopology & "preferThreads"

// CPUPreferences contains various optional CPU preferences.
#CPUPreferences: {
	// PreferredCPUTopology optionally defines the preferred guest visible CPU topology, defaults to PreferSockets.
	//
	//+optional
	preferredCPUTopology?: #PreferredCPUTopology @go(PreferredCPUTopology)
}

// DevicePreferences contains various optional Device preferences.
#DevicePreferences: {
	// PreferredAutoattachGraphicsDevice optionally defines the preferred value of AutoattachGraphicsDevice
	//
	// +optional
	preferredAutoattachGraphicsDevice?: null | bool @go(PreferredAutoattachGraphicsDevice,*bool)

	// PreferredAutoattachMemBalloon optionally defines the preferred value of AutoattachMemBalloon
	//
	// +optional
	preferredAutoattachMemBalloon?: null | bool @go(PreferredAutoattachMemBalloon,*bool)

	// PreferredAutoattachPodInterface optionally defines the preferred value of AutoattachPodInterface
	//
	// +optional
	preferredAutoattachPodInterface?: null | bool @go(PreferredAutoattachPodInterface,*bool)

	// PreferredAutoattachSerialConsole optionally defines the preferred value of AutoattachSerialConsole
	//
	// +optional
	preferredAutoattachSerialConsole?: null | bool @go(PreferredAutoattachSerialConsole,*bool)

	// PreferredAutoattachInputDevice optionally defines the preferred value of AutoattachInputDevice
	//
	// +optional
	preferredAutoattachInputDevice?: null | bool @go(PreferredAutoattachInputDevice,*bool)

	// PreferredDisableHotplug optionally defines the preferred value of DisableHotplug
	//
	// +optional
	preferredDisableHotplug?: null | bool @go(PreferredDisableHotplug,*bool)

	// PreferredVirtualGPUOptions optionally defines the preferred value of VirtualGPUOptions
	//
	// +optional
	preferredVirtualGPUOptions?: null | v1.#VGPUOptions @go(PreferredVirtualGPUOptions,*v1.VGPUOptions)

	// PreferredSoundModel optionally defines the preferred model for Sound devices.
	//
	// +optional
	preferredSoundModel?: string @go(PreferredSoundModel)

	// PreferredUseVirtioTransitional optionally defines the preferred value of UseVirtioTransitional
	//
	// +optional
	preferredUseVirtioTransitional?: null | bool @go(PreferredUseVirtioTransitional,*bool)

	// PreferredInputBus optionally defines the preferred bus for Input devices.
	//
	// +optional
	preferredInputBus?: v1.#InputBus @go(PreferredInputBus)

	// PreferredInputType optionally defines the preferred type for Input devices.
	//
	// +optional
	preferredInputType?: v1.#InputType @go(PreferredInputType)

	// PreferredDiskBus optionally defines the preferred bus for Disk Disk devices.
	//
	// +optional
	preferredDiskBus?: v1.#DiskBus @go(PreferredDiskBus)

	// PreferredLunBus optionally defines the preferred bus for Lun Disk devices.
	//
	// +optional
	preferredLunBus?: v1.#DiskBus @go(PreferredLunBus)

	// PreferredCdromBus optionally defines the preferred bus for Cdrom Disk devices.
	//
	// +optional
	preferredCdromBus?: v1.#DiskBus @go(PreferredCdromBus)

	// PreferredDedicatedIoThread optionally enables dedicated IO threads for Disk devices.
	//
	// +optional
	preferredDiskDedicatedIoThread?: null | bool @go(PreferredDiskDedicatedIoThread,*bool)

	// PreferredCache optionally defines the DriverCache to be used by Disk devices.
	//
	// +optional
	preferredDiskCache?: v1.#DriverCache @go(PreferredDiskCache)

	// PreferredIo optionally defines the QEMU disk IO mode to be used by Disk devices.
	//
	// +optional
	preferredDiskIO?: v1.#DriverIO @go(PreferredDiskIO)

	// PreferredBlockSize optionally defines the block size of Disk devices.
	//
	// +optional
	preferredDiskBlockSize?: null | v1.#BlockSize @go(PreferredDiskBlockSize,*v1.BlockSize)

	// PreferredInterfaceModel optionally defines the preferred model to be used by Interface devices.
	//
	// +optional
	preferredInterfaceModel?: string @go(PreferredInterfaceModel)

	// PreferredRng optionally defines the preferred rng device to be used.
	//
	// +optional
	preferredRng?: null | v1.#Rng @go(PreferredRng,*v1.Rng)

	// PreferredBlockMultiQueue optionally enables the vhost multiqueue feature for virtio disks.
	//
	// +optional
	preferredBlockMultiQueue?: null | bool @go(PreferredBlockMultiQueue,*bool)

	// PreferredNetworkInterfaceMultiQueue optionally enables the vhost multiqueue feature for virtio interfaces.
	//
	// +optional
	preferredNetworkInterfaceMultiQueue?: null | bool @go(PreferredNetworkInterfaceMultiQueue,*bool)

	// PreferredTPM optionally defines the preferred TPM device to be used.
	//
	// +optional
	preferredTPM?: null | v1.#TPMDevice @go(PreferredTPM,*v1.TPMDevice)
}

// FeaturePreferences contains various optional defaults for Features.
#FeaturePreferences: {
	// PreferredAcpi optionally enables the ACPI feature
	//
	// +optional
	preferredAcpi?: null | v1.#FeatureState @go(PreferredAcpi,*v1.FeatureState)

	// PreferredApic optionally enables and configures the APIC feature
	//
	// +optional
	preferredApic?: null | v1.#FeatureAPIC @go(PreferredApic,*v1.FeatureAPIC)

	// PreferredHyperv optionally enables and configures HyperV features
	//
	// +optional
	preferredHyperv?: null | v1.#FeatureHyperv @go(PreferredHyperv,*v1.FeatureHyperv)

	// PreferredKvm optionally enables and configures KVM features
	//
	// +optional
	preferredKvm?: null | v1.#FeatureKVM @go(PreferredKvm,*v1.FeatureKVM)

	// PreferredPvspinlock optionally enables the Pvspinlock feature
	//
	// +optional
	preferredPvspinlock?: null | v1.#FeatureState @go(PreferredPvspinlock,*v1.FeatureState)

	// PreferredSmm optionally enables the SMM feature
	//
	// +optional
	preferredSmm?: null | v1.#FeatureState @go(PreferredSmm,*v1.FeatureState)
}

// FirmwarePreferences contains various optional defaults for Firmware.
#FirmwarePreferences: {
	// PreferredUseBios optionally enables BIOS
	//
	// +optional
	preferredUseBios?: null | bool @go(PreferredUseBios,*bool)

	// PreferredUseBiosSerial optionally transmitts BIOS output over the serial.
	//
	// Requires PreferredUseBios to be enabled.
	//
	// +optional
	preferredUseBiosSerial?: null | bool @go(PreferredUseBiosSerial,*bool)

	// PreferredUseEfi optionally enables EFI
	//
	// +optional
	preferredUseEfi?: null | bool @go(PreferredUseEfi,*bool)

	// PreferredUseSecureBoot optionally enables SecureBoot and the OVMF roms will be swapped for SecureBoot-enabled ones.
	//
	// Requires PreferredUseEfi and PreferredSmm to be enabled.
	//
	// +optional
	preferredUseSecureBoot?: null | bool @go(PreferredUseSecureBoot,*bool)
}

// MachinePreferences contains various optional defaults for Machine.
#MachinePreferences: {
	// PreferredMachineType optionally defines the preferred machine type to use.
	//
	// +optional
	preferredMachineType?: string @go(PreferredMachineType)
}

// ClockPreferences contains various optional defaults for Clock.
#ClockPreferences: {
	// ClockOffset allows specifying the UTC offset or the timezone of the guest clock.
	//
	// +optional
	preferredClockOffset?: null | v1.#ClockOffset @go(PreferredClockOffset,*v1.ClockOffset)

	// Timer specifies whih timers are attached to the vmi.
	//
	// +optional
	preferredTimer?: null | v1.#Timer @go(PreferredTimer,*v1.Timer)
}
