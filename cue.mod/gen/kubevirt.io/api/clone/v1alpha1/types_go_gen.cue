// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go kubevirt.io/api/clone/v1alpha1

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	corev1 "k8s.io/api/core/v1"
)

// VirtualMachineClone is a CRD that clones one VM into another.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
// +genclient
#VirtualMachineClone: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta         @go(ObjectMeta)
	spec:      #VirtualMachineCloneSpec   @go(Spec)
	status?:   #VirtualMachineCloneStatus @go(Status)
}

#VirtualMachineCloneSpec: {
	source?: null | corev1.#TypedLocalObjectReference @go(Source,*corev1.TypedLocalObjectReference)

	// If the target is not provided, a random name would be generated for the target.
	// The target's name can be viewed by inspecting status "TargetName" field below.
	// +optional
	target?: null | corev1.#TypedLocalObjectReference @go(Target,*corev1.TypedLocalObjectReference)

	// +optional
	// +listType=atomic
	annotationFilters?: [...string] @go(AnnotationFilters,[]string)

	// +optional
	// +listType=atomic
	labelFilters?: [...string] @go(LabelFilters,[]string)

	// NewMacAddresses manually sets that target interfaces' mac addresses. The key is the interface name and the
	// value is the new mac address. If this field is not specified, a new MAC address will
	// be generated automatically, as for any interface that is not included in this map.
	// +optional
	newMacAddresses?: {[string]: string} @go(NewMacAddresses,map[string]string)

	// NewSMBiosSerial manually sets that target's SMbios serial. If this field is not specified, a new serial will
	// be generated automatically.
	// +optional
	newSMBiosSerial?: null | string @go(NewSMBiosSerial,*string)
}

#VirtualMachineClonePhase: string // #enumVirtualMachineClonePhase

#enumVirtualMachineClonePhase:
	#PhaseUnset |
	#SnapshotInProgress |
	#CreatingTargetVM |
	#RestoreInProgress |
	#Succeeded |
	#Failed |
	#Unknown

#PhaseUnset:         #VirtualMachineClonePhase & ""
#SnapshotInProgress: #VirtualMachineClonePhase & "SnapshotInProgress"
#CreatingTargetVM:   #VirtualMachineClonePhase & "CreatingTargetVM"
#RestoreInProgress:  #VirtualMachineClonePhase & "RestoreInProgress"
#Succeeded:          #VirtualMachineClonePhase & "Succeeded"
#Failed:             #VirtualMachineClonePhase & "Failed"
#Unknown:            #VirtualMachineClonePhase & "Unknown"

#VirtualMachineCloneStatus: {
	// +optional
	// +nullable
	creationTime?: null | metav1.#Time @go(CreationTime,*metav1.Time)

	// +optional
	phase?: #VirtualMachineClonePhase @go(Phase)

	// +optional
	// +listType=atomic
	conditions?: [...#Condition] @go(Conditions,[]Condition)

	// +optional
	// +nullable
	snapshotName?: null | string @go(SnapshotName,*string)

	// +optional
	// +nullable
	restoreName?: null | string @go(RestoreName,*string)

	// +optional
	// +nullable
	targetName?: null | string @go(TargetName,*string)
}

// ConditionType is the const type for Conditions
#ConditionType: string // #enumConditionType

#enumConditionType:
	#ConditionReady |
	#ConditionProgressing

// ConditionReady is the "ready" condition type
#ConditionReady: #ConditionType & "Ready"

// ConditionProgressing is the "progressing" condition type
#ConditionProgressing: #ConditionType & "Progressing"

// Condition defines conditions
#Condition: {
	type:   #ConditionType          @go(Type)
	status: corev1.#ConditionStatus @go(Status)

	// +optional
	// +nullable
	lastProbeTime?: metav1.#Time @go(LastProbeTime)

	// +optional
	// +nullable
	lastTransitionTime?: metav1.#Time @go(LastTransitionTime)

	// +optional
	reason?: string @go(Reason)

	// +optional
	message?: string @go(Message)
}

// VirtualMachineCloneList is a list of MigrationPolicy
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#VirtualMachineCloneList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)

	// +listType=atomic
	items: [...#VirtualMachineClone] @go(Items,[]VirtualMachineClone)
}
