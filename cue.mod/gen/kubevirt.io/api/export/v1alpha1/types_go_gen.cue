// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go kubevirt.io/api/export/v1alpha1

package v1alpha1

import (
	"time"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	corev1 "k8s.io/api/core/v1"
)

#App:                "virt-exporter"
#DefaultDurationTTL: time.#Duration & 7200000000000

// VirtualMachineExport defines the operation of exporting a VM source
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#VirtualMachineExport: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta        @go(ObjectMeta)
	spec:      #VirtualMachineExportSpec @go(Spec)

	// +optional
	status?: null | #VirtualMachineExportStatus @go(Status,*VirtualMachineExportStatus)
}

// VirtualMachineExportList is a list of VirtualMachineExport resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#VirtualMachineExportList: {
	metav1.#TypeMeta
	metadata: metav1.#ListMeta @go(ListMeta)

	// +listType=atomic
	items: [...#VirtualMachineExport] @go(Items,[]VirtualMachineExport)
}

// VirtualMachineExportSpec is the spec for a VirtualMachineExport resource
#VirtualMachineExportSpec: {
	source: corev1.#TypedLocalObjectReference @go(Source)

	// +optional
	// TokenSecretRef is the name of the custom-defined secret that contains the token used by the export server pod
	tokenSecretRef?: null | string @go(TokenSecretRef,*string)

	// ttlDuration limits the lifetime of an export
	// If this field is set, after this duration has passed from counting from CreationTimestamp,
	// the export is eligible to be automatically deleted.
	// If this field is omitted, a reasonable default is applied.
	// +optional
	ttlDuration?: null | metav1.#Duration @go(TTLDuration,*metav1.Duration)
}

// VirtualMachineExportPhase is the current phase of the VirtualMachineExport
#VirtualMachineExportPhase: string // #enumVirtualMachineExportPhase

#enumVirtualMachineExportPhase:
	#Pending |
	#Ready |
	#Terminated |
	#Skipped

// Pending means the Virtual Machine export is pending
#Pending: #VirtualMachineExportPhase & "Pending"

// Ready means the Virtual Machine export is ready
#Ready: #VirtualMachineExportPhase & "Ready"

// Terminated means the Virtual Machine export is terminated and no longer available
#Terminated: #VirtualMachineExportPhase & "Terminated"

// Skipped means the export is invalid in a way so the exporter pod cannot start, and we are skipping creating the exporter server pod.
#Skipped: #VirtualMachineExportPhase & "Skipped"

// VirtualMachineExportStatus is the status for a VirtualMachineExport resource
#VirtualMachineExportStatus: {
	// +optional
	phase?: #VirtualMachineExportPhase @go(Phase)

	// +optional
	links?: null | #VirtualMachineExportLinks @go(Links,*VirtualMachineExportLinks)

	// +optional
	// TokenSecretRef is the name of the secret that contains the token used by the export server pod
	tokenSecretRef?: null | string @go(TokenSecretRef,*string)

	// The time at which the VM Export will be completely removed according to specified TTL
	// Formula is CreationTimestamp + TTL
	ttlExpirationTime?: null | metav1.#Time @go(TTLExpirationTime,*metav1.Time)

	// +optional
	// ServiceName is the name of the service created associated with the Virtual Machine export. It will be used to
	// create the internal URLs for downloading the images
	serviceName?: string @go(ServiceName)

	// +optional
	// +listType=atomic
	conditions?: [...#Condition] @go(Conditions,[]Condition)
}

// VirtualMachineExportLinks contains the links that point the exported VM resources
#VirtualMachineExportLinks: {
	// +optional
	internal?: null | #VirtualMachineExportLink @go(Internal,*VirtualMachineExportLink)

	// +optional
	external?: null | #VirtualMachineExportLink @go(External,*VirtualMachineExportLink)
}

// VirtualMachineExportLink contains a list of volumes available for export, as well as the URLs to obtain these volumes
#VirtualMachineExportLink: {
	// Cert is the public CA certificate base64 encoded
	cert: string @go(Cert)

	// Volumes is a list of available volumes to export
	// +listType=map
	// +listMapKey=name
	// +optional
	volumes?: [...#VirtualMachineExportVolume] @go(Volumes,[]VirtualMachineExportVolume)

	// Manifests is a list of available manifests for the export
	// +listType=map
	// +listMapKey=type
	// +optional
	manifests?: [...#VirtualMachineExportManifest] @go(Manifests,[]VirtualMachineExportManifest)
}

// VirtualMachineExportManifest contains the type and URL of the exported manifest
#VirtualMachineExportManifest: {
	// Type is the type of manifest returned
	type: #ExportManifestType @go(Type)

	// Url is the url of the endpoint that returns the manifest
	url: string @go(Url)
}

#ExportManifestType: string // #enumExportManifestType

#enumExportManifestType:
	#AllManifests |
	#AuthHeader

// AllManifests returns all manifests except for the token secret
#AllManifests: #ExportManifestType & "all"

// AuthHeader returns a CDI compatible secret containing the token as an Auth header
#AuthHeader: #ExportManifestType & "auth-header-secret"

// VirtualMachineExportVolume contains the name and available formats for the exported volume
#VirtualMachineExportVolume: {
	// Name is the name of the exported volume
	name: string @go(Name)

	// +listType=map
	// +listMapKey=format
	// +optional
	formats?: [...#VirtualMachineExportVolumeFormat] @go(Formats,[]VirtualMachineExportVolumeFormat)
}

#ExportVolumeFormat: string // #enumExportVolumeFormat

#enumExportVolumeFormat:
	#KubeVirtRaw |
	#KubeVirtGz |
	#Dir |
	#ArchiveGz

// KubeVirtRaw is the volume in RAW format
#KubeVirtRaw: #ExportVolumeFormat & "raw"

// KubeVirtGZ is the volume in gzipped RAW format.
#KubeVirtGz: #ExportVolumeFormat & "gzip"

// Dir is an uncompressed directory, which points to the root of a PersistentVolumeClaim, exposed using a FileServer https://pkg.go.dev/net/http#FileServer
#Dir: #ExportVolumeFormat & "dir"

// ArchiveGz is a tarred and gzipped version of the root of a PersistentVolumeClaim
#ArchiveGz: #ExportVolumeFormat & "tar.gz"

// VirtualMachineExportVolumeFormat contains the format type and URL to get the volume in that format
#VirtualMachineExportVolumeFormat: {
	// Format is the format of the image at the specified URL
	format: #ExportVolumeFormat @go(Format)

	// Url is the url that contains the volume in the format specified
	url: string @go(Url)
}

// ConditionType is the const type for Conditions
#ConditionType: string // #enumConditionType

#enumConditionType:
	#ConditionReady |
	#ConditionPVC |
	#ConditionVolumesCreated

// ConditionReady is the "ready" condition type
#ConditionReady: #ConditionType & "Ready"

// ConditionPVC is the condition of the PVC we are exporting
#ConditionPVC: #ConditionType & "PVCReady"

// ConditionVolumesCreated is the condition to see if volumes are created from volume snapshots
#ConditionVolumesCreated: #ConditionType & "VolumesCreated"

// Condition defines conditions
#Condition: {
	type:   #ConditionType          @go(Type)
	status: corev1.#ConditionStatus @go(Status)

	// +optional
	// +nullable
	lastProbeTime?: metav1.#Time @go(LastProbeTime)

	// +optional
	// +nullable
	lastTransitionTime?: metav1.#Time @go(LastTransitionTime)

	// +optional
	reason?: string @go(Reason)

	// +optional
	message?: string @go(Message)
}
